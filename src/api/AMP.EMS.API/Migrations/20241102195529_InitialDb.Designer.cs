// <auto-generated />
using System;
using AMP.EMS.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AMP.EMS.API.Migrations
{
    [DbContext(typeof(EMSDbContext))]
    [Migration("20241102195529_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountsTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39c7f89e-d573-43f0-b60c-80f29234b6e6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1910),
                            Description = "",
                            Name = "Cash",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b38e5113-0634-428a-9e03-28f6ff65477e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1910),
                            Description = "",
                            Name = "GCash",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5d7f9c89-7886-43c5-a609-f83022c6e793"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1910),
                            Description = "",
                            Name = "Savings",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("fa3d4349-a34e-4d22-a21d-a470a57e2760"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1920),
                            Description = "",
                            Name = "Credit Card",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e5df034b-4f1d-4092-8cee-8c286d2b17f4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1920),
                            Description = "",
                            Name = "Checking",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EventId");

                    b.ToTable("EventAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("GuestId");

                    b.ToTable("EventGuests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventInvitationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestId");

                    b.HasIndex("EventInvitationId");

                    b.ToTable("EventGuestInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestInvitationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Response")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestInvitationId");

                    b.ToTable("EventGuestInvitationRsvps");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvpItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestInvitationRsvpId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestInvitationRsvpId");

                    b.ToTable("EventGuestInvitationsRsvpItems");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestId");

                    b.HasIndex("RoleId");

                    b.ToTable("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1570),
                            Description = "A ceremony where two people are united in marriage.",
                            Name = "Wedding",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a22558d4-58eb-4d55-a815-873f88a29d17"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1630),
                            Description = "An event organized by a company or business for its employees or clients.",
                            Name = "Corporate Event",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("601cc735-2f79-4454-a8ac-f670a77969e3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1640),
                            Description = "A celebration of the anniversary of a person's birth.",
                            Name = "Birthday Party",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6c8333dc-a284-4e3f-8cbe-9319e9250918"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1640),
                            Description = "A celebration commemorating a significant milestone in a couple's relationship.",
                            Name = "Anniversary Celebration",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("55f6f124-917d-4d1f-aca5-51a0bf0d8640"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1660),
                            Description = "A celebration to honor the completion of an academic program.",
                            Name = "Graduation Party",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b4918248-220f-4217-8359-ce5f79791b08"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1670),
                            Description = "A celebration held to honor the expectant mother and her baby.",
                            Name = "Baby Shower",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("805f3b18-c524-4aea-b7bc-0ab9884dad15"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1670),
                            Description = "An event organized to raise funds or awareness for a charitable cause.",
                            Name = "Charity Event",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("51ec424c-18bf-4467-b2d9-deaf4303281f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1680),
                            Description = "A live performance of music by one or more musicians.",
                            Name = "Concert",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("de00b82c-d344-486b-9910-452f73ae697a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1680),
                            Description = "A series of events or activities celebrating a particular theme or occasion.",
                            Name = "Festival",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f42b983e-56c5-4f65-a6b0-0e226d366ccd"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1690),
                            Description = "An exhibition where businesses showcase their products and services.",
                            Name = "Trade Show",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventTypeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("EventTypeRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17de235b-7516-4dd6-94e1-fcff215147c7"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1800),
                            Description = "The female participant in the wedding.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Bride",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("22a2d957-6fa6-4be8-9658-0d1d67fd3282"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1810),
                            Description = "The male participant in the wedding.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Groom",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("adc63af1-e617-4821-ae3a-96cadb1c7890"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1810),
                            Description = "The groom's chief assistant during the wedding.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Best Man",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("35ddad54-b2b7-430b-b1a5-b0a07711f837"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1810),
                            Description = "The bride's chief assistant during the wedding.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Maid of Honor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("cda0cf93-b223-48bb-bbf0-0f9134518960"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1820),
                            Description = "The main financial supporter of the wedding.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Primary Sponsor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8dda2d8c-dca1-4c1c-8370-8bd22b4b4442"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1820),
                            Description = "An additional financial supporter of the wedding.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Secondary Sponsor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("cb4c47d6-27e2-41f6-ac2c-c30e5ca76c6d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1830),
                            Description = "A young girl who scatters flower petals along the aisle.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Flower Girl",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8cf1629b-6f26-4e88-9009-5eb45665a052"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1830),
                            Description = "A young child who carries the wedding rings during the ceremony.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Ring Bearer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("496bd411-ec28-44e2-a17b-b610b6855126"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1830),
                            Description = "A person invited to attend the wedding.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Guest",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("fee9aa40-c186-4922-8e9d-8ef175559302"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1840),
                            Description = "A person who carries the Bible during the ceremony.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Bible Bearer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5e6eb995-38cb-41ff-8aaa-1dbc0d2e6a27"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1840),
                            Description = "A role representing the cord used in the ceremony.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Cord",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e9ef94c7-0338-46ca-876b-0ffa02014233"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1850),
                            Description = "A role representing the candle holders during the ceremony.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Candles",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("35d0ab2e-b32a-47c5-8658-404773e460c0"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1850),
                            Description = "Individuals responsible for seating guests at the ceremony.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Ushers",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f4362dd1-04c0-4808-8c5c-f1364b809d92"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1860),
                            Description = "Friends or family who stand with the groom during the ceremony.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Groomsmen",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2cebd2eb-1a24-4b6d-9ca3-88c4c59f0c2b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1860),
                            Description = "Friends or family who stand with the bride during the ceremony.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Bridesmaids",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("123023dc-0444-4867-8a2b-cfc43d5aeb7b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1860),
                            Description = "A key family member who may have a significant role.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Parent of the Bride",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4d8a788d-7592-45ce-babc-ccd8cf3d8529"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1870),
                            Description = "A key family member representing the groom's side.",
                            EventTypeId = new Guid("5a2996d5-aff6-48aa-9cee-4012d93452ec"),
                            Name = "Parent of the Groom",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventVendorStatusId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventVendorStatusId");

                    b.HasIndex("VendorId");

                    b.ToTable("EventVendors");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventVendorStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("509aa82a-7d9d-42d1-bdb0-ebe14d8f0e87"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1980),
                            Description = "The vendor has been identified but the booking has not yet been finalized.",
                            Name = "Pending",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d88dfe5e-bb85-4169-b02a-543f46693bed"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1980),
                            Description = "The vendor has been officially booked for the event.",
                            Name = "Confirmed",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("cc5b3c0e-af60-4a32-b007-a8aa7910c525"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1990),
                            Description = "The vendor is on hold for the event while waiting for confirmation.",
                            Name = "Reserved",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("542e5117-292c-44ab-b1b9-26cf3d801f8d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1990),
                            Description = "The vendor was booked but has been removed from the event.",
                            Name = "Cancelled",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("def1c0b8-3c8a-4045-bd85-bf277eaadeb1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1990),
                            Description = "The vendor has formally declined the offer to provide services.",
                            Name = "Declined",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("75439e31-f371-49d7-836b-2bae648dea34"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2000),
                            Description = "The vendor has fulfilled their obligations, and the event has occurred.",
                            Name = "Completed",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("004c66cc-f3f6-4b86-a4f3-25a95c1615c2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2000),
                            Description = "The vendor is actively working on preparations for the event.",
                            Name = "In Progress",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b01800c6-6f28-4c78-9dbb-a47c986768d3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2010),
                            Description = "The vendor is of interest for potential future events.",
                            Name = "Wishlist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f0914dc5-2cd1-4cff-aebb-d775ce6c7e45"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2010),
                            Description = "The vendor's performance is under review, and feedback is required.",
                            Name = "Feedback Needed",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e4ffc16e-89b9-4cab-a156-72e847626f02"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2020),
                            Description = "The vendor's status is temporarily suspended due to ongoing discussions.",
                            Name = "On Hold",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTypeBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("EventBudgets");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreditAccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DebitAccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("668a0f1e-1b0a-45c3-904b-09a397ecd949"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1950),
                            Description = "A general payment or debit from a user’s account, often for non-purchase activities, such as bill payments or installment payments.",
                            Name = "Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("90963680-0dfb-4f6f-aaa1-abb3241a2f2f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1950),
                            Description = "Represents adding funds to an account, usually as a top-up or a prepayment.",
                            Name = "Deposit",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d73bcb66-4def-459d-9e44-fa85c78b0cf1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(1960),
                            Description = "Represents money returned to the user for a previous purchase, usually due to a return or an issue with the product/service.",
                            Name = "Refund",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VendorTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42a63e48-52cf-4ad2-98a0-5a847d6924f1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2050),
                            Description = "Provides food and beverage services for the wedding.",
                            Name = "Caterer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3861e1df-790e-47ff-9b12-cadc6773bbef"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2050),
                            Description = "Supplies floral arrangements, bouquets, and centerpieces.",
                            Name = "Florist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("24380723-2d08-45b5-84d7-653bff7a093e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2050),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("232f1fba-ea73-4fba-9c76-dceec31bde74"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2060),
                            Description = "Records the wedding ceremony and reception with high-quality video.",
                            Name = "Videographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e2eeea58-40e4-47a9-a8d3-8ef062cc95aa"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2070),
                            Description = "Provides music entertainment and emceeing for the wedding and reception.",
                            Name = "DJ",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f6813150-0b44-4678-a758-4803f967b793"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2070),
                            Description = "A musical group that performs live at the wedding reception.",
                            Name = "Live Band",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("16eb2c9f-28a0-48c2-9006-946fffcc6c7a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2070),
                            Description = "Coordinates all aspects of the wedding planning process from start to finish.",
                            Name = "Wedding Planner",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("efff4bf7-b20b-42dc-90e4-41e6190927a6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2080),
                            Description = "Location where the wedding ceremony and/or reception is held.",
                            Name = "Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c99d91b3-a118-44d3-8238-09714d0fc4cd"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2080),
                            Description = "Creates wedding cakes, cupcakes, and desserts for the celebration.",
                            Name = "Baker",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("29b0fae2-6b4f-4021-9028-4264d4673ed9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2090),
                            Description = "Provides vehicles for transporting the wedding party and guests.",
                            Name = "Transportation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("9fb30448-7dc1-4295-9fa3-ebf5e6b2eff5"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2090),
                            Description = "Conducts the wedding ceremony and ensures it is legally binding.",
                            Name = "Officiant",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("789ee902-687a-41f9-b6ae-f3b3cbf62bda"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2100),
                            Description = "Styles hair for the bride, bridesmaids, and other family members.",
                            Name = "Hair Stylist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1f61d0c4-aa07-409e-b87e-031a78909edf"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2100),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Makeup Artist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("12ec116a-6e6d-4613-9560-2e4171fffc5c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2100),
                            Description = "Offers items for rent such as tables, chairs, linens, and decor.",
                            Name = "Rentals",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("315406a2-d0ec-42d5-9668-a985868aef4a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2110),
                            Description = "Designs and prints wedding invitations, save-the-dates, and programs.",
                            Name = "Stationery",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2748dca1-edb8-4660-a8ba-11f15614bf8d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2110),
                            Description = "Provides a fun photo booth setup with props for guests to enjoy.",
                            Name = "Photo Booth",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5361af9b-4339-46a6-9d9d-66b2afd1a99f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2120),
                            Description = "Ensures the safety and security of the wedding event and guests.",
                            Name = "Security",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3b0ef132-5648-4abb-bd56-803cf915d3ef"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2120),
                            Description = "Creates customized lighting plans to enhance the wedding ambiance.",
                            Name = "Lighting Designer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("bbb6face-d1dd-4e56-abfc-bad6d61ed491"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 2, 19, 55, 28, 962, DateTimeKind.Utc).AddTicks(2120),
                            Description = "Manages sound systems and audio equipment for the ceremony and reception.",
                            Name = "Sound Engineer",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventAccount", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "Account")
                        .WithMany("EventAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventAccounts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventGuests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Guest", "Guest")
                        .WithMany("EventGuests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuest", "EventGuest")
                        .WithMany("EventGuestInvitations")
                        .HasForeignKey("EventGuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventInvitation", "EventInvitation")
                        .WithMany("EventGuestInvitations")
                        .HasForeignKey("EventInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuest");

                    b.Navigation("EventInvitation");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuestInvitation", "EventGuestInvitation")
                        .WithMany("EventGuestInvitationRsvps")
                        .HasForeignKey("EventGuestInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuestInvitation");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvpItem", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", "EventGuestInvitationRsvp")
                        .WithMany("EventGuestInvitationRsvpItems")
                        .HasForeignKey("EventGuestInvitationRsvpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuestInvitationRsvp");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestRole", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuest", "EventGuest")
                        .WithMany("EventGuestRoles")
                        .HasForeignKey("EventGuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Role", "Role")
                        .WithMany("EventGuestRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuest");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventInvitations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventTypeRole", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventType", "EventType")
                        .WithMany("EventTypeRoles")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendor", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendors")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorStatus", "EventVendorStatus")
                        .WithMany("EventVendors")
                        .HasForeignKey("EventVendorStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("EventVendors")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("EventVendorStatus");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTypeBudget", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventBudgets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.VendorType", "VendorType")
                        .WithMany("EventVendorTypeBudgets")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("VendorType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("Roles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "CreditAccount")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "DebitAccount")
                        .WithMany("DebitTransactions")
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMP.EMS.API.Core.Entities.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.VendorType", "VendorType")
                        .WithMany("Vendors")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VendorType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorAccount", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "Account")
                        .WithMany("VendorAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("VendorAccounts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.Navigation("CreditTransactions");

                    b.Navigation("DebitTransactions");

                    b.Navigation("EventAccounts");

                    b.Navigation("VendorAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.Navigation("EventAccounts");

                    b.Navigation("EventBudgets");

                    b.Navigation("EventGuests");

                    b.Navigation("EventInvitations");

                    b.Navigation("EventVendors");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.Navigation("EventGuestInvitations");

                    b.Navigation("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.Navigation("EventGuestInvitationRsvps");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.Navigation("EventGuestInvitationRsvpItems");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.Navigation("EventGuestInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventType", b =>
                {
                    b.Navigation("EventTypeRoles");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorStatus", b =>
                {
                    b.Navigation("EventVendors");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Guest", b =>
                {
                    b.Navigation("EventGuests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.Navigation("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.Navigation("EventVendors");

                    b.Navigation("VendorAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorType", b =>
                {
                    b.Navigation("EventVendorTypeBudgets");

                    b.Navigation("Vendors");
                });
#pragma warning restore 612, 618
        }
    }
}
