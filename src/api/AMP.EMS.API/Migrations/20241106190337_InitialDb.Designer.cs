// <auto-generated />
using System;
using AMP.EMS.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AMP.EMS.API.Migrations
{
    [DbContext(typeof(EmsDbContext))]
    [Migration("20241106190337_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c32a87a-6527-4f55-ac3e-e4d78e3bf031"),
                            AccountNumber = "9c02578b-0b7e-46ef-a4f9-66596bce6762",
                            AccountTypeId = new Guid("c8d7e776-acbb-4b1d-80df-4dd888fb87b3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7900),
                            Name = "Vendor Account",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("35d2acaa-2f90-42ce-bee9-bc4c16e2d2bf"),
                            AccountNumber = "51035d7e-291a-4d22-b9f0-04506a30bc0c",
                            AccountTypeId = new Guid("c8d7e776-acbb-4b1d-80df-4dd888fb87b3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8190),
                            Name = "Event Account",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8d7e776-acbb-4b1d-80df-4dd888fb87b3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(740),
                            Description = "",
                            Name = "Cash",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ff262531-fa1f-4eec-992e-19fb7ada6616"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(740),
                            Description = "",
                            Name = "GCash",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("65edd900-f9fd-49a5-bc20-0e41f38632d7"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(750),
                            Description = "",
                            Name = "Savings",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("24942542-7aaa-49df-b97a-569c98df1aba"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(750),
                            Description = "",
                            Name = "Credit Card",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("42720c94-07ec-4901-b14c-8173f869a3f7"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(750),
                            Description = "",
                            Name = "Checking",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7970),
                            Description = "Wedding",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = new Guid("f7c6c362-90ad-475f-bd0e-854c83d55870"),
                            Location = "Ph",
                            Seats = 0,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Wedding",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EventId");

                    b.ToTable("EventAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b14d741e-0235-4c67-8427-c223e085961e"),
                            AccountId = new Guid("35d2acaa-2f90-42ce-bee9-bc4c16e2d2bf"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8210),
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("GuestId");

                    b.ToTable("EventGuests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventInvitationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestId");

                    b.HasIndex("EventInvitationId");

                    b.ToTable("EventGuestInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestInvitationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Response")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestInvitationId");

                    b.ToTable("EventGuestInvitationRsvps");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvpItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestInvitationRsvpId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestInvitationRsvpId");

                    b.ToTable("EventGuestInvitationsRsvpItems");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestId");

                    b.HasIndex("RoleId");

                    b.ToTable("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RsvpDeadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7c6c362-90ad-475f-bd0e-854c83d55870"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(580),
                            Description = "A ceremony where two people are united in marriage.",
                            Name = "Wedding",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("aa26c480-40e1-4435-9339-5ba09de27abd"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(630),
                            Description = "An event organized by a company or business for its employees or clients.",
                            Name = "Corporate Event",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("183bf5ad-c3ca-457d-adbc-40955196204b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(640),
                            Description = "A celebration of the anniversary of a person's birth.",
                            Name = "Birthday Party",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("79c16dc1-a94b-4c68-8bcb-bec04c440f77"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(640),
                            Description = "A celebration commemorating a significant milestone in a couple's relationship.",
                            Name = "Anniversary Celebration",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6054ef8f-bd58-41e5-a4e4-4efe93a0feb3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(650),
                            Description = "A celebration to honor the completion of an academic program.",
                            Name = "Graduation Party",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4a0cbda5-fd39-4938-a67b-e3bcce3591e0"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(650),
                            Description = "A celebration held to honor the expectant mother and her baby.",
                            Name = "Baby Shower",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("36ae1366-8f70-498f-a770-98c02570788e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(660),
                            Description = "An event organized to raise funds or awareness for a charitable cause.",
                            Name = "Charity Event",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5d3aeb1f-df53-4615-90c5-43b1560513b1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(660),
                            Description = "A live performance of music by one or more musicians.",
                            Name = "Concert",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("711c66e3-44f4-492c-a303-c0e441f0bf07"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(660),
                            Description = "A series of events or activities celebrating a particular theme or occasion.",
                            Name = "Festival",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("7201311b-e463-491a-ad5e-ad0aa765fcad"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(670),
                            Description = "An exhibition where businesses showcase their products and services.",
                            Name = "Trade Show",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventTypeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("EventTypeRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventVendorContractPaymentStateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventVendorContractStateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventVendorContractPaymentStateId");

                    b.HasIndex("EventVendorContractStateId");

                    b.HasIndex("VendorId");

                    b.ToTable("EventVendorContracts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventVendorContractPaymentState");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94c0f886-9d0e-4d73-84b0-5733222dd42a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8130),
                            Description = "Waiting for the initial deposit to be paid.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Deposit Pending",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("79dba2a1-6bcd-45a7-b08a-9d184ee456bb"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8140),
                            Description = "Partial payment received, remaining balance due.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Partial Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("48ba786e-2259-4f9c-baf2-75f40f2ff34f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8140),
                            Description = "All payments have been made, contract is paid in full.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Paid in Full",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("62103302-c8af-474c-9829-4535246ea8de"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8150),
                            Description = "Payment is overdue.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Overdue Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("258c66f0-ebc1-4db2-8eca-2f56c4be545e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8150),
                            Description = "Refund is pending processing.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Refund Pending",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("50eb29c9-2ae2-43fd-8349-c33a90d67985"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8150),
                            Description = "Refund has been processed and completed.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Refunded",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventVendorContractStates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06259499-dc3d-4200-bb25-db4365bbd2bf"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8080),
                            Description = "Initial inquiry stage.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Inquiry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a2209a96-afeb-4ba5-88cc-f33623acee7f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8090),
                            Description = "Waiting for a quote from the vendor.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Pending Quote",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0a921687-4ff9-480c-b396-98d6675c1ab3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8090),
                            Description = "Quote has been received from the vendor.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Quote Received",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("7ec31d87-276e-41e2-9c62-0229c7589277"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8100),
                            Description = "Negotiations are ongoing with the vendor.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Negotiation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2a7604f4-24eb-44b9-be95-923b6fcacb76"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8100),
                            Description = "Reserved but not yet confirmed.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Reserved",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2a2e96c6-32ac-4f21-bb80-a96de656fe10"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8110),
                            Description = "Tentatively booked, awaiting confirmation.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Tentative",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ea394113-327f-42c2-bc28-c42759562f10"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8110),
                            Description = "Contract has been booked and confirmed.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Booked",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e166af46-0fb4-450f-9ddd-d45f3d6a3609"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8110),
                            Description = "Contract has been completed and closed.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Closed",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("VendorId");

                    b.ToTable("EventVendorTransactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTypeBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("EventVendorTypeBudgets");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bdf497e7-8cdb-47fe-9ebf-f700427091f4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7530),
                            Description = "Food and beverage services, including full-course meals, buffets, and bar services.",
                            Name = "Catering",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("587e6750-6106-4e63-9e8c-7855955776a2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7540),
                            Description = "Locations for wedding ceremonies, receptions, and other related events.",
                            Name = "Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ab8025d4-5b5d-4cad-9ef3-1574b50323fa"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7550),
                            Description = "Professional photography services for capturing wedding moments.",
                            Name = "Photography",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("131b721e-913a-4689-86fc-032c7653c5b3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7550),
                            Description = "Video recording services to capture and document the wedding day.",
                            Name = "Videography",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3d89eed8-de2a-410c-9186-60bae382e187"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7550),
                            Description = "Floral arrangements, bouquets, and other decorative flower services.",
                            Name = "Floristry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1d1c3f60-16e3-48a9-836f-36fa9ac7f368"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7560),
                            Description = "Decorative items and setup services, including centerpieces, lighting, and table settings.",
                            Name = "Decor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ad54812b-f71e-4d14-bcbc-c3a7d9020f96"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7560),
                            Description = "Entertainment services, including live bands, DJs, and performers.",
                            Name = "Music & Entertainment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5b344922-2272-4aad-b7bf-746cff87cddd"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7560),
                            Description = "Coordination and planning services to manage the entire wedding event.",
                            Name = "Wedding Planning",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("029334aa-e87c-4ea3-8914-7f58f204b913"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7570),
                            Description = "Transportation services for the wedding party and guests, such as limousines and shuttles.",
                            Name = "Transportation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3a94507a-2019-47fa-94af-ade237a1813b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7570),
                            Description = "Wedding cakes, desserts, and other sweets for the reception.",
                            Name = "Cake & Confectionery",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4dd8ed37-a4bd-46a3-9ced-0930c3b7a395"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7570),
                            Description = "Wedding attire rentals or purchases, including dresses, suits, and accessories.",
                            Name = "Attire & Accessories",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8b3e8901-29f4-4486-a849-f82543c812d2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7580),
                            Description = "Beauty services for the bridal party, including hairstyling and makeup.",
                            Name = "Hair & Makeup",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a52aac78-9294-41bc-b96f-6868f51edb72"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7580),
                            Description = "Design and printing services for wedding invitations, save-the-dates, and other stationery.",
                            Name = "Stationery & Invitations",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("cc748d21-f978-4332-90eb-b4607ebe713a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7590),
                            Description = "Professional officiants to conduct the wedding ceremony.",
                            Name = "Officiant Services",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("83051d11-3f92-4b22-b1f1-4d66b8698423"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7590),
                            Description = "Rental of items like furniture, tableware, tents, and dance floors.",
                            Name = "Rentals",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("370b8c67-a068-40a8-ad9a-12a8f4930121"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7590),
                            Description = "Wedding rings, bridal jewelry, and other related accessories.",
                            Name = "Jewelry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d8bd39c7-cd95-4b40-8c5f-91ca0cc5c1be"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7600),
                            Description = "Gifts and party favors for guests.",
                            Name = "Favors & Gifts",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d21fb20-b114-4f2b-b356-0ebff9cfd631"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7990),
                            Description = "The female participant in the wedding.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Bride",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8d10c669-ad01-4c40-b7c6-aa88def5684f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8000),
                            Description = "The male participant in the wedding.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Groom",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("12f8381a-e544-408c-bbde-2a70f4d76922"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8000),
                            Description = "The groom's chief assistant during the wedding.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Best Man",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e5e53174-f0bf-4712-86c8-5b327b07e617"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8010),
                            Description = "The bride's chief assistant during the wedding.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Maid of Honor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3b5ef963-f882-4f39-ab10-d08be7fc3b08"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8010),
                            Description = "The main financial supporter of the wedding.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Primary Sponsor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ac61a7f7-11ba-493f-984f-5e28c56a67d4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8010),
                            Description = "An additional financial supporter of the wedding.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Secondary Sponsor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3ba5ddcb-be28-49d6-995b-b83b546ed73a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8020),
                            Description = "A young girl who scatters flower petals along the aisle.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Flower Girl",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ece31ae7-c125-4b63-8ce2-7c69fb40ec3c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8020),
                            Description = "A young child who carries the wedding rings during the ceremony.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Ring Bearer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("57d29754-80d5-4a15-822e-f7abadf945d9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8030),
                            Description = "A person invited to attend the wedding.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Guest",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("200fda0f-1595-4e6b-aba4-0dc10e0fe5ff"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8030),
                            Description = "A person who carries the Bible during the ceremony.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Bible Bearer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a57a3392-a2f2-4054-abbe-0becf445a0c4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8030),
                            Description = "A role representing the cord used in the ceremony.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Cord",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6f150c4b-6332-4940-8b25-cb712aaa127c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8040),
                            Description = "A role representing the candle holders during the ceremony.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Candles",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ffae5178-7d4b-45df-84dc-da8f92c80a66"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8040),
                            Description = "Individuals responsible for seating guests at the ceremony.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Ushers",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("65066089-4699-4b9e-ad87-d60c55e61d84"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8050),
                            Description = "Friends or family who stand with the groom during the ceremony.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Groomsmen",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d4739baa-4862-485a-ad51-f11e57d43c2f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8050),
                            Description = "Friends or family who stand with the bride during the ceremony.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Bridesmaids",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("29206ed1-da08-43d2-8e28-2cc91acd8d4b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8050),
                            Description = "A key family member who may have a significant role.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Parent of the Bride",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b6fa2863-f662-4764-8ab3-a3a9d166b98d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(8060),
                            Description = "A key family member representing the groom's side.",
                            EventId = new Guid("69ab9653-c631-4634-b4b6-a629f8615212"),
                            Name = "Parent of the Groom",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreditAccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DebitAccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d56e836e-be51-4976-b07d-1d80b2b56bd2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(800),
                            Description = "A general payment or debit from a user’s account, often for non-purchase activities, such as bill payments or installment payments.",
                            Name = "Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3961e5ba-7230-40a1-812c-2bf91780e3b3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(810),
                            Description = "Represents adding funds to an account, usually as a top-up or a prepayment.",
                            Name = "Deposit",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("18d56995-5908-403a-ab43-f75d4c9bc775"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 681, DateTimeKind.Utc).AddTicks(810),
                            Description = "Represents money returned to the user for a previous purchase, usually due to a return or an issue with the product/service.",
                            Name = "Refund",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c618cca2-fc8e-4a58-832e-8ddc1287ae29"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7810),
                            Description = "A venue for hosting wedding ceremonies, typically in a religious setting.",
                            Name = "Church",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("85e14ff5-7905-497f-af12-92e0cdd9032f")
                        },
                        new
                        {
                            Id = new Guid("13557d96-26fe-4b8a-bfe3-e7a6c2e645bd"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7820),
                            Description = "A venue for hosting post-ceremony receptions or gatherings.",
                            Name = "Reception Venue",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("f821501d-cb36-4dfd-b8b8-daad3ebc42d9")
                        },
                        new
                        {
                            Id = new Guid("006fd6a8-19fd-4075-bb82-80549f154e5e"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7820),
                            Description = "Manages lights, sound systems and audio equipment for the ceremony and reception.",
                            Name = "Lights & Sounds",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("97b5dd40-f540-40d1-bfa2-66d4dede9ac5")
                        },
                        new
                        {
                            Id = new Guid("7c49b5d1-fa13-43e1-b68a-3f25864064db"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7830),
                            Description = "Provides food and beverage services for the wedding.",
                            Name = "Caterer",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("3ca5bbbc-32d0-4d7f-ad8d-fe2d007296ba")
                        },
                        new
                        {
                            Id = new Guid("d7edf160-588d-4e7d-83de-2c1f67658c4b"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7830),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photo & Video",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("508ee3db-f119-410f-ad66-20c9150535e2")
                        },
                        new
                        {
                            Id = new Guid("5413447f-8438-4d77-8f60-2101731bc13b"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7840),
                            Description = "A musical group that performs live at the wedding reception.",
                            Name = "Strings",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("05dd88de-960e-42e6-af2c-9ba614369833")
                        },
                        new
                        {
                            Id = new Guid("23449a6f-418d-4651-84d8-72116167bfed"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7840),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Hair & Makeup",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("7c0285eb-57d8-41dc-8c3b-7e2093ec7532")
                        },
                        new
                        {
                            Id = new Guid("5afe4043-aad0-4bbb-9a41-eb6cc9331f86"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7850),
                            Description = "Supplies floral arrangements, bouquets, and centerpieces.",
                            Name = "Florist",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("0f19a7bf-d67b-4d06-86ed-db782c61a12e")
                        },
                        new
                        {
                            Id = new Guid("2662bdea-cb67-45bb-93f2-caa6c117f97b"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7850),
                            Description = "Sells wedding rings and related jewelry.",
                            Name = "Jeweler",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("89d88aad-dfbc-41b4-aa8d-186bc19481e5")
                        },
                        new
                        {
                            Id = new Guid("f2c6d454-07d6-4c62-8b2f-bb09ac307830"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7850),
                            Description = "Organizes wedding activities and ensures event flows smoothly.",
                            Name = "Wedding Coordinator",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("b68ee99f-0313-4002-9f0a-ff20edd378f2")
                        },
                        new
                        {
                            Id = new Guid("71617f5e-54c0-4749-81ad-b7e0323bdb17"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7860),
                            Description = "Provides mobile bar services for cocktail hours and receptions.",
                            Name = "Mobile Bar",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("0c2b6903-955a-40be-8323-90a2653197ca")
                        },
                        new
                        {
                            Id = new Guid("ad3ca28b-f710-4b46-9a1e-f1f188cac358"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7860),
                            Description = "Offers keepsakes or favors for wedding guests.",
                            Name = "Souvenirs",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("17665b12-d967-4cf3-9a02-80ca603e0936")
                        },
                        new
                        {
                            Id = new Guid("f806f849-4d64-4652-bcef-1d828896bd7a"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7870),
                            Description = "Hosts and coordinates the wedding program.",
                            Name = "Emcee",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("25522887-25ec-4f2f-bfbf-433e97000a1b")
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9af1d76c-b9ac-4d93-b544-5408db653f62"),
                            AccountId = new Guid("9c32a87a-6527-4f55-ac3e-e4d78e3bf031"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7940),
                            UpdatedBy = "",
                            VendorId = new Guid("c618cca2-fc8e-4a58-832e-8ddc1287ae29")
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VendorTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85e14ff5-7905-497f-af12-92e0cdd9032f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7620),
                            Description = "A venue for hosting wedding ceremonies, typically in a religious setting.",
                            Name = "Church",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f821501d-cb36-4dfd-b8b8-daad3ebc42d9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7630),
                            Description = "A venue for hosting post-ceremony receptions or gatherings.",
                            Name = "Reception Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("97b5dd40-f540-40d1-bfa2-66d4dede9ac5"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7630),
                            Description = "Manages lights, sound systems and audio equipment for the ceremony and reception.",
                            Name = "Lights & Sounds",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3ca5bbbc-32d0-4d7f-ad8d-fe2d007296ba"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7640),
                            Description = "Provides food and beverage services for the wedding.",
                            Name = "Caterer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("508ee3db-f119-410f-ad66-20c9150535e2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7640),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photographer & Videographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("05dd88de-960e-42e6-af2c-9ba614369833"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7650),
                            Description = "A musical group that performs live at the wedding reception.",
                            Name = "Live Band",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("7c0285eb-57d8-41dc-8c3b-7e2093ec7532"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7650),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Hair & Makeup Artist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0f19a7bf-d67b-4d06-86ed-db782c61a12e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7650),
                            Description = "Supplies floral arrangements, bouquets, and centerpieces.",
                            Name = "Florist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("89d88aad-dfbc-41b4-aa8d-186bc19481e5"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7660),
                            Description = "Sells wedding rings and related jewelry.",
                            Name = "Jeweler",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b68ee99f-0313-4002-9f0a-ff20edd378f2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7660),
                            Description = "Organizes wedding activities and ensures event flows smoothly.",
                            Name = "Wedding Coordinator",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0c2b6903-955a-40be-8323-90a2653197ca"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7660),
                            Description = "Provides mobile bar services for cocktail hours and receptions.",
                            Name = "Mobile Bar",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("17665b12-d967-4cf3-9a02-80ca603e0936"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7670),
                            Description = "Offers keepsakes or favors for wedding guests.",
                            Name = "Souvenirs",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("25522887-25ec-4f2f-bfbf-433e97000a1b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7670),
                            Description = "Hosts and coordinates the wedding program.",
                            Name = "Emcee",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5fe77510-e4a4-457c-aae1-250f9887eee2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7680),
                            Description = "Location where the wedding ceremony and/or reception is held.",
                            Name = "Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("7d334885-a8ed-4fa1-917c-7c46740cb58d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7700),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ebdd7825-f0e2-4451-bc33-196b2d9f75bd"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7700),
                            Description = "Records the wedding ceremony and reception with high-quality video.",
                            Name = "Videographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b96aef48-211e-4b09-801b-3c71c35667ae"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7700),
                            Description = "Provides music entertainment and emceeing for the wedding and reception.",
                            Name = "DJ",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f4828f75-1eb9-407a-86ce-1e643cb902c9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7710),
                            Description = "Coordinates all aspects of the wedding planning process from start to finish.",
                            Name = "Wedding Planner",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("95a48777-4e64-4d59-b96f-a0eba4df43c5"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7710),
                            Description = "Creates wedding cakes, cupcakes, and desserts for the celebration.",
                            Name = "Baker",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a0a206f6-0b33-4ac1-acc7-2ce5de4403f7"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7720),
                            Description = "Provides vehicles for transporting the wedding party and guests.",
                            Name = "Transportation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("242eb61a-ceb1-4944-b6cb-dbc3b2d7e7ec"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7720),
                            Description = "Conducts the wedding ceremony and ensures it is legally binding.",
                            Name = "Officiant",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("96725c6a-2732-4cea-90e8-0c3731c3fd94"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7720),
                            Description = "Styles hair for the bride, bridesmaids, and other family members.",
                            Name = "Hair Stylist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("65d40493-0478-409e-99f6-b8904942b642"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7730),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Makeup Artist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8750de2c-1151-448b-be69-fed4898d5cc7"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7730),
                            Description = "Offers items for rent such as tables, chairs, linens, and decor.",
                            Name = "Rentals",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0215f011-ddb4-46e0-904e-5e520f3a170b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7730),
                            Description = "Designs and prints wedding invitations, save-the-dates, and programs.",
                            Name = "Stationery",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("86b63700-3a45-47cf-985a-ce065310e9ed"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7740),
                            Description = "Provides a fun photo booth setup with props for guests to enjoy.",
                            Name = "Photo Booth",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("921fb57d-df79-4184-822e-f144d9928514"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7740),
                            Description = "Ensures the safety and security of the wedding event and guests.",
                            Name = "Security",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4f9f72b4-e242-4a9a-857a-78467b5ab2bd"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7750),
                            Description = "Creates customized lighting plans to enhance the wedding ambiance.",
                            Name = "Lighting Designer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("63ed16d6-67a7-413b-b55f-a88693444886"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 19, 3, 37, 682, DateTimeKind.Utc).AddTicks(7750),
                            Description = "Manages sound systems and audio equipment for the ceremony and reception.",
                            Name = "Sound Engineer",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventAccount", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "Account")
                        .WithMany("EventAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventAccounts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventGuests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Guest", "Guest")
                        .WithMany("EventGuests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuest", "EventGuest")
                        .WithMany("EventGuestInvitations")
                        .HasForeignKey("EventGuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventInvitation", "EventInvitation")
                        .WithMany("EventGuestInvitations")
                        .HasForeignKey("EventInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuest");

                    b.Navigation("EventInvitation");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuestInvitation", "EventGuestInvitation")
                        .WithMany("EventGuestInvitationRsvps")
                        .HasForeignKey("EventGuestInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuestInvitation");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvpItem", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", "EventGuestInvitationRsvp")
                        .WithMany("EventGuestInvitationRsvpItems")
                        .HasForeignKey("EventGuestInvitationRsvpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuestInvitationRsvp");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestRole", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuest", "EventGuest")
                        .WithMany("EventGuestRoles")
                        .HasForeignKey("EventGuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Role", "Role")
                        .WithMany("EventGuestRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuest");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventInvitations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventTypeRole", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventType", "EventType")
                        .WithMany("EventTypeRoles")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContract", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", "EventVendorContractPaymentState")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("EventVendorContractPaymentStateId");

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContractState", "EventVendorContractState")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("EventVendorContractStateId");

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("EventVendorContractPaymentState");

                    b.Navigation("EventVendorContractState");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorContractStates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTransaction", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Transaction", "Transaction")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Transaction");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTypeBudget", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventBudgets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.VendorType", "VendorType")
                        .WithMany("EventVendorTypeBudgets")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("VendorType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Product", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("Roles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "CreditAccount")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "DebitAccount")
                        .WithMany("DebitTransactions")
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AMP.EMS.API.Core.Entities.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.VendorType", "VendorType")
                        .WithMany("Vendors")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VendorType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorAccount", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "Account")
                        .WithMany("VendorAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("VendorAccounts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.Navigation("CreditTransactions");

                    b.Navigation("DebitTransactions");

                    b.Navigation("EventAccounts");

                    b.Navigation("VendorAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.Navigation("EventAccounts");

                    b.Navigation("EventBudgets");

                    b.Navigation("EventGuests");

                    b.Navigation("EventInvitations");

                    b.Navigation("EventVendorContractStates");

                    b.Navigation("EventVendorContracts");

                    b.Navigation("EventVendorTransactions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.Navigation("EventGuestInvitations");

                    b.Navigation("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.Navigation("EventGuestInvitationRsvps");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.Navigation("EventGuestInvitationRsvpItems");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.Navigation("EventGuestInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventType", b =>
                {
                    b.Navigation("EventTypeRoles");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.Navigation("EventVendorContracts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.Navigation("EventVendorContracts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Guest", b =>
                {
                    b.Navigation("EventGuests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.Navigation("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.Navigation("EventVendorTransactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.Navigation("EventVendorContracts");

                    b.Navigation("EventVendorTransactions");

                    b.Navigation("VendorAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorType", b =>
                {
                    b.Navigation("EventVendorTypeBudgets");

                    b.Navigation("Vendors");
                });
#pragma warning restore 612, 618
        }
    }
}
