// <auto-generated />
using System;
using AMP.EMS.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AMP.EMS.API.Migrations
{
    [DbContext(typeof(EmsDbContext))]
    [Migration("20241109153020_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            AccountNumber = "816b5f34-768d-49a6-a522-0f825e97bbaf",
                            AccountTypeId = new Guid("02d081e8-bb1a-4d6d-aa16-c29e72e7c973"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2790),
                            Name = "Vendor Account",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("323293f2-8fc9-4570-aee8-5fdd39881351"),
                            AccountNumber = "4eda7bdb-2f07-4bfa-86f9-3ac97e64957b",
                            AccountTypeId = new Guid("02d081e8-bb1a-4d6d-aa16-c29e72e7c973"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3320),
                            Name = "Event Account",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02d081e8-bb1a-4d6d-aa16-c29e72e7c973"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2320),
                            Description = "",
                            Name = "Cash",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f7b8d330-ca51-4211-80ba-ab6acc90f044"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2330),
                            Description = "",
                            Name = "GCash",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b06fcff7-ce4a-457b-870f-b364dd8aaab9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2330),
                            Description = "",
                            Name = "Savings",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("fd9c4fad-94fd-45fd-a6d2-f5997e43f5a3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2330),
                            Description = "",
                            Name = "Credit Card",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("500819d8-4552-4703-828b-4cf8dcaaad91"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2340),
                            Description = "",
                            Name = "Checking",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("HtmlContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2910),
                            Description = "Wedding",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = new Guid("ec954559-ef9d-4a75-85ba-541b4cb3227e"),
                            Location = "Ph",
                            Seats = 0,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Wedding",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EventId");

                    b.ToTable("EventAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3421cd47-528e-4925-a3f3-8e8a2cdda4b1"),
                            AccountId = new Guid("323293f2-8fc9-4570-aee8-5fdd39881351"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3340),
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("GuestId");

                    b.ToTable("EventGuests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventInvitationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestId");

                    b.HasIndex("EventInvitationId");

                    b.ToTable("EventGuestInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestInvitationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Response")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestInvitationId");

                    b.ToTable("EventGuestInvitationRsvps");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvpItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestInvitationRsvpId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestInvitationRsvpId");

                    b.ToTable("EventGuestInvitationsRsvpItems");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestId");

                    b.HasIndex("RoleId");

                    b.ToTable("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RsvpDeadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("EventId");

                    b.ToTable("EventInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec954559-ef9d-4a75-85ba-541b4cb3227e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2130),
                            Description = "A ceremony where two people are united in marriage.",
                            Name = "Wedding",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b3a07ce2-b81f-4f5c-86a8-be40b98d2cd4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2190),
                            Description = "An event organized by a company or business for its employees or clients.",
                            Name = "Corporate Event",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6ae85560-d130-4de0-8226-b56c988530ab"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2190),
                            Description = "A celebration of the anniversary of a person's birth.",
                            Name = "Birthday Party",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a3590b8b-45c5-4f98-8142-f64413f0eb67"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2200),
                            Description = "A celebration commemorating a significant milestone in a couple's relationship.",
                            Name = "Anniversary Celebration",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b109f167-bf15-4038-b523-bea1921cb8d6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2200),
                            Description = "A celebration to honor the completion of an academic program.",
                            Name = "Graduation Party",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("36e7e0e3-3bfb-4125-8fe3-08bec8b84e3a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2210),
                            Description = "A celebration held to honor the expectant mother and her baby.",
                            Name = "Baby Shower",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a102afd5-615a-40cc-94e1-90bf771036a5"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2210),
                            Description = "An event organized to raise funds or awareness for a charitable cause.",
                            Name = "Charity Event",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a4c59226-8865-471b-b724-0ec7e818deed"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2210),
                            Description = "A live performance of music by one or more musicians.",
                            Name = "Concert",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("925dd43f-3882-4125-9065-851013d6d1d8"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2220),
                            Description = "A series of events or activities celebrating a particular theme or occasion.",
                            Name = "Festival",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5e5c644a-d32b-40a4-9819-1842065d48a5"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2220),
                            Description = "An exhibition where businesses showcase their products and services.",
                            Name = "Trade Show",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventTypeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("EventTypeRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventVendorContractPaymentStateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventVendorContractStateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventVendorContractStateId");

                    b.HasIndex("VendorId");

                    b.ToTable("EventVendorContracts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DueAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventVendorContractId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventVendorContractPaymentStateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventVendorContractPaymentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventVendorContractId");

                    b.HasIndex("EventVendorContractPaymentStateId");

                    b.HasIndex("EventVendorContractPaymentTypeId");

                    b.HasIndex("TransactionId");

                    b.ToTable("EventVendorContractPayments");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventVendorContractPaymentStates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc6dd2b7-dc15-4cea-bafd-5db09317e3df"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3260),
                            Description = "Payment is scheduled but not yet made.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Pending",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1483b413-c2b5-4746-a172-4fe7bd3f095f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3270),
                            Description = "A portion of the payment has been made.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Partially Paid",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("67b78b67-fb98-4e59-97d8-66f8cdc0079a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3270),
                            Description = "The full payment has been received.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Completed",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("26bd2530-b8b2-4076-813d-8cbf00c30044"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3280),
                            Description = "Payment is past the due date and is overdue.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Overdue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("edf4e442-66f6-4fea-9722-42e50bbf70ce"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3280),
                            Description = "Payment attempt was unsuccessful.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Failed",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("87cadc08-82f2-45e1-9c83-df7a1a7f3106"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3280),
                            Description = "Payment has been returned to the payer.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Refunded",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("97da28b7-b283-4903-9ffa-af09a00cc9f1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3290),
                            Description = "The payment was canceled.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Canceled",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1883b151-47f9-460f-a4b5-9f1a3a05c3e7"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3290),
                            Description = "Payment is under review and pending approval.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "In Review",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("45df8de5-abf7-46e1-88d5-f4b8a5e38fd5"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3290),
                            Description = "Payment is temporarily paused or held.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Hold",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0b1c8174-24b4-4fed-8f58-94a304cbb1b3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3300),
                            Description = "Payment is planned for a future date.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Scheduled",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventVendorContractPaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55646e27-1718-408a-9aa8-0b3db6065bc3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3170),
                            Description = "Initial payment to secure services or confirm a booking.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Deposit",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ad7ec30b-997e-43c8-91e3-0cb69cbb4037"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3180),
                            Description = "Payment to secure ongoing services, may or may not apply toward final balance.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Retainer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a257f1f6-7265-4445-9146-4316c11c1c84"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3180),
                            Description = "Scheduled partial payment at specific intervals in the contract.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Installment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8dc6201a-34db-43d2-b5a4-60a737732db5"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3190),
                            Description = "Payments made upon reaching specific milestones or stages.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Progress Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4bf7b765-6f9c-4bb7-9f4a-aad389c9b707"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3190),
                            Description = "Remaining balance due upon completion of the contract.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Final Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f6b15557-24ff-45ee-a592-15a711c02b71"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3200),
                            Description = "Payment made in advance for materials, equipment, or initial requirements.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Advance Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("70bc6289-b6a8-4fad-beb4-479d075e0a21"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3200),
                            Description = "Fee charged for contract violations or unmet deadlines.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Penalty Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2c28ac1e-98c5-41c2-9db8-8981ffcff974"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3200),
                            Description = "Additional fee imposed if a payment is not made on time.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Late Fee",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("670b35a7-8cef-4ca4-ada2-cda0af578aaf"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3210),
                            Description = "Fee charged if the contract is canceled after a specified date.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Cancellation Fee",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("774d0d05-4692-440e-a24a-293173409535"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3210),
                            Description = "Reduction in payment, often for early payment or promotional purposes.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Discount",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c428ff6c-3e06-4e79-b191-6a98bb4de6c5"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3210),
                            Description = "Amount returned to the client if conditions such as cancellations are met.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Refund",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1820fbd2-29ef-40c6-ae92-19c988f18899"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3220),
                            Description = "Portion of payment withheld until contract conditions are satisfactorily fulfilled.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Holdback",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b54d7b24-b632-46e8-9461-740c34ce1f37"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3230),
                            Description = "Additional fee for using a specific payment method.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Service Charge",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2617743d-e9e6-4fbb-b5c5-d085e95bb377"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3230),
                            Description = "Payment held by a third party until contract terms are fulfilled.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Escrow Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0d03a578-60db-49ab-aa66-0319aa422c5a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3230),
                            Description = "Additional payment for exceeding performance expectations.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Bonus Payment",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventVendorContractStates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9612655-5153-4f7c-94b2-16def6adadcb"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3080),
                            Description = "Initial contact to check vendor availability and gather preliminary information.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Inquiry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e7b29691-c947-4213-b5f7-d11bac553287"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3090),
                            Description = "Vendor provides a detailed proposal including costs, services, and timelines.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Proposal",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d529b4ab-337d-43bd-9ed5-15292771fac1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3090),
                            Description = "Discussion and adjustments of terms, pricing, and deliverables.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Negotiation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("00c404b5-bcd0-4d60-bcc8-0432072d140c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3100),
                            Description = "Internal review and approval of the final terms.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Approval",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d7b8c4c3-9177-45ed-a06c-e741c51ded3f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3100),
                            Description = "Formal contract is drafted and sent to the vendor for review and signing.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Contract Sent",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("cf080be2-8f02-4c58-b5b1-cf7e0bf7ae35"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3110),
                            Description = "Vendor reviews the contract and proposes changes or confirms terms.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Contract Review",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("05d7adca-dd53-4181-93f7-b185026dab95"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3110),
                            Description = "Both parties sign the contract, making it legally binding.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Signed",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("43df2865-db1a-4c7c-b076-03ae0e60fbca"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3110),
                            Description = "An initial deposit is paid to secure the vendor’s services.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Deposit Paid",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2538ed42-b4f6-45aa-8c79-5d02d4f4edd7"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3120),
                            Description = "Vendor begins preparations for the event based on the agreed services.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Preparation and Planning",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("af252ff1-bfce-4a81-a9f3-805c9cedbeac"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3120),
                            Description = "Vendor delivers their services during the event as outlined in the contract.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Execution",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8ae2f7fc-e178-4304-b8c9-ebf2cf39b0aa"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3120),
                            Description = "Discussion of adjustments if needed during execution.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Review and Adjustments",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a1c41846-7dcf-4c05-8f02-8cfccf67982b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3130),
                            Description = "Final payment is made upon the completion of services.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Completion and Final Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f3586ed3-6fa7-4c41-b12a-a8546d482a25"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3130),
                            Description = "Event manager provides feedback on the vendor’s performance.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Feedback and Review",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("96b9fa12-ff67-4577-b70f-94f916a922be"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3140),
                            Description = "Contract is officially closed after all deliverables are met and payments are completed.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Contract Closeout",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("VendorId");

                    b.ToTable("EventVendorTransactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTypeBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("EventVendorTypeBudgets");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f05938b-bb2d-4f52-81ff-8883737c10d7"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2360),
                            Description = "Food and beverage services, including full-course meals, buffets, and bar services.",
                            Name = "Catering",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("9b45f19b-75a3-438f-a99a-41daaa84c040"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2380),
                            Description = "Locations for wedding ceremonies, receptions, and other related events.",
                            Name = "Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("490cdf27-bdb6-4dc0-8936-a1430d938662"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2390),
                            Description = "Professional photography services for capturing wedding moments.",
                            Name = "Photography",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("17dafb61-e27a-4640-afd5-db90cbbb5df4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2390),
                            Description = "Video recording services to capture and document the wedding day.",
                            Name = "Videography",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e7a06360-f78d-41cc-8665-61bf0a7b10a1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2390),
                            Description = "Floral arrangements, bouquets, and other decorative flower services.",
                            Name = "Floristry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d8e1ccdc-bb70-4759-9a2b-da627187317d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2400),
                            Description = "Decorative items and setup services, including centerpieces, lighting, and table settings.",
                            Name = "Decor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("30e1ad85-a0aa-455a-b34d-4a4859317e70"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2400),
                            Description = "Entertainment services, including live bands, DJs, and performers.",
                            Name = "Music & Entertainment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1222a76d-3c60-42ca-9271-5b58539bf12a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2410),
                            Description = "Coordination and planning services to manage the entire wedding event.",
                            Name = "Wedding Planning",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d4e2377d-fc20-4e77-ac43-83bccd0bdfaa"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2410),
                            Description = "Transportation services for the wedding party and guests, such as limousines and shuttles.",
                            Name = "Transportation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2dbb13fc-45d3-42de-97b3-d2c980b011a2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2430),
                            Description = "Wedding cakes, desserts, and other sweets for the reception.",
                            Name = "Cake & Confectionery",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2e9f6496-d993-4bdb-95f2-cd5d2e54025c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2430),
                            Description = "Wedding attire rentals or purchases, including dresses, suits, and accessories.",
                            Name = "Attire & Accessories",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8dfceb97-5500-4e49-ac9e-18f285d766d2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2440),
                            Description = "Beauty services for the bridal party, including hairstyling and makeup.",
                            Name = "Hair & Makeup",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("865fe6ac-de8f-4c51-a46c-83c7966a247f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2440),
                            Description = "Design and printing services for wedding invitations, save-the-dates, and other stationery.",
                            Name = "Stationery & Invitations",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5c0f2309-6a1d-4ba2-9c21-a476de55ea5e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2440),
                            Description = "Professional officiants to conduct the wedding ceremony.",
                            Name = "Officiant Services",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("69ac64d3-d622-4dbd-9674-2b084e574773"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2450),
                            Description = "Rental of items like furniture, tableware, tents, and dance floors.",
                            Name = "Rentals",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("46a726a5-4472-448e-8417-4694a0ae2c6a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2450),
                            Description = "Wedding rings, bridal jewelry, and other related accessories.",
                            Name = "Jewelry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5dcce45c-9fb3-4c7f-beff-25750f05ffba"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2450),
                            Description = "Gifts and party favors for guests.",
                            Name = "Favors & Gifts",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02ad38ba-a83c-4255-a760-e02a5c568132"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2940),
                            Description = "The female participant in the wedding.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Bride",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("bf5abf23-ed6d-4d0e-b704-6dee7a5a1820"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2950),
                            Description = "The male participant in the wedding.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Groom",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e7f49fad-b351-4981-beb1-2f890a0cc59f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2990),
                            Description = "The groom's chief assistant during the wedding.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Best Man",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0583cc20-5eb4-4c7e-913f-89903203df32"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2990),
                            Description = "The bride's chief assistant during the wedding.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Maid of Honor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("542ff4f6-35fa-4581-8e92-8b7df30eda9b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3000),
                            Description = "The main financial supporter of the wedding.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Primary Sponsor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6c9514c1-29f8-4140-b8e7-90cc9fdf1d60"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3000),
                            Description = "An additional financial supporter of the wedding.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Secondary Sponsor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c0b98d13-c20d-4710-8c63-36d44e71a9e8"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3010),
                            Description = "A young girl who scatters flower petals along the aisle.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Flower Girl",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b18e23fb-ae02-45db-8f5c-db332d6f5627"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3010),
                            Description = "A young child who carries the wedding rings during the ceremony.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Ring Bearer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("11ea0a44-8de6-49a3-af97-3d85e52b562e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3010),
                            Description = "A person invited to attend the wedding.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Guest",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8d259d94-1345-4af2-8937-b143294f178c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3020),
                            Description = "A person who carries the Bible during the ceremony.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Bible Bearer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f76c592a-bf05-4695-a793-dc9196c1669f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3020),
                            Description = "A role representing the cord used in the ceremony.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Cord",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("cfc12038-32e2-4bc8-ad65-356214c2e55e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3030),
                            Description = "A role representing the candle holders during the ceremony.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Candles",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("33c7dccb-23f0-4fee-a08f-b672c3c18984"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3030),
                            Description = "Individuals responsible for seating guests at the ceremony.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Ushers",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d142ede2-fee7-4fca-90fa-d0fafe9b069a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3030),
                            Description = "Friends or family who stand with the groom during the ceremony.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Groomsmen",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("07845c72-b5d4-49d8-aded-36553feb2850"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3040),
                            Description = "Friends or family who stand with the bride during the ceremony.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Bridesmaids",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("eb00a127-74b7-4156-8933-6e41cb179ed4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3040),
                            Description = "A key family member who may have a significant role.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Parent of the Bride",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ed809762-9918-4bc0-8a85-1ade09926b8e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(3050),
                            Description = "A key family member representing the groom's side.",
                            EventId = new Guid("6623411d-8e17-4101-b429-fae571b1caae"),
                            Name = "Parent of the Groom",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreditAccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DebitAccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4deb0b73-fd0d-4e82-9999-4d9b91918b4c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2380),
                            Description = "A general payment or debit from a user’s account, often for non-purchase activities, such as bill payments or installment payments.",
                            Name = "Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8ab0a935-a7ca-482e-a552-092ff2eb6c8a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2380),
                            Description = "Represents adding funds to an account, usually as a top-up or a prepayment.",
                            Name = "Deposit",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4d6bc72d-c559-4f27-94ec-b097313251b2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 142, DateTimeKind.Utc).AddTicks(2390),
                            Description = "Represents money returned to the user for a previous purchase, usually due to a return or an issue with the product/service.",
                            Name = "Refund",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc905377-0e04-45fa-8df7-6c0b5c41233d"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2700),
                            Description = "A venue for hosting wedding ceremonies, typically in a religious setting.",
                            Name = "Church",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("a27fbe9d-f9ec-472b-b276-ca838ad9fe65")
                        },
                        new
                        {
                            Id = new Guid("12e0c13d-d4df-4466-bc80-1d57f7e5c53b"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2700),
                            Description = "A venue for hosting post-ceremony receptions or gatherings.",
                            Name = "Reception Venue",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("3e340924-cde0-478f-9ebc-03bf6e0b0cf9")
                        },
                        new
                        {
                            Id = new Guid("81b97a70-6dc3-4081-80d5-9e5c85916d13"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2710),
                            Description = "Manages lights, sound systems and audio equipment for the ceremony and reception.",
                            Name = "Lights & Sounds",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("e6ae9ba0-77c4-41bd-888f-43c8ba3e9784")
                        },
                        new
                        {
                            Id = new Guid("72266823-efa2-4149-a265-01d811bc1cea"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2710),
                            Description = "Provides food and beverage services for the wedding.",
                            Name = "Caterer",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("3273144b-df11-419e-8ace-c27e8074e8c9")
                        },
                        new
                        {
                            Id = new Guid("44861575-9bc4-4fb2-9b56-51be2e8bef02"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2720),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photo & Video",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("eca44e40-a748-4372-80ab-aed8b57e4fcd")
                        },
                        new
                        {
                            Id = new Guid("b4f5ce8f-d59a-4a7c-a7a5-d174ae8d4464"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2720),
                            Description = "A musical group that performs live at the wedding reception.",
                            Name = "Strings",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("5a0ea860-b775-4282-baaf-5d26532ff52a")
                        },
                        new
                        {
                            Id = new Guid("0fcc1cdf-d4cf-4e88-a22b-1f5419606e7f"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2730),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Hair & Makeup",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("18db66c2-191c-4e34-abf1-f97166dc14f8")
                        },
                        new
                        {
                            Id = new Guid("06e62faa-ff9f-4893-b904-ec854385d33e"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2730),
                            Description = "Supplies floral arrangements, bouquets, and centerpieces.",
                            Name = "Florist",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("f2e88535-0d18-4186-97cd-e0e1a8c8ccde")
                        },
                        new
                        {
                            Id = new Guid("e5f6171a-4a2b-44d1-98c5-8ae8773a9bef"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2740),
                            Description = "Sells wedding rings and related jewelry.",
                            Name = "Jeweler",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("4ed3ccea-e270-4c58-b7d3-8ae8cda3e076")
                        },
                        new
                        {
                            Id = new Guid("c1d49297-f566-46ec-bd4a-bc6df6625ed1"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2740),
                            Description = "Organizes wedding activities and ensures event flows smoothly.",
                            Name = "Wedding Coordinator",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("fd7ac64f-1326-47c7-bf47-64b448441620")
                        },
                        new
                        {
                            Id = new Guid("f1aaccae-ac18-40bb-a6ee-5059ff2fcc45"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2750),
                            Description = "Provides mobile bar services for cocktail hours and receptions.",
                            Name = "Mobile Bar",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("babe111c-6c11-4bdf-9390-e981db0e915a")
                        },
                        new
                        {
                            Id = new Guid("115fe38b-6a9b-403b-8a08-63bd73e3cf51"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2750),
                            Description = "Offers keepsakes or favors for wedding guests.",
                            Name = "Souvenirs",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("75152bd9-427d-4b31-962b-ab54482b249b")
                        },
                        new
                        {
                            Id = new Guid("55725585-220d-43ea-8245-f4b75f6e19e4"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2760),
                            Description = "Hosts and coordinates the wedding program.",
                            Name = "Emcee",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("aed438e7-0a34-44b6-bf33-2aad08a05d1b")
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72b85905-bbbf-47dc-b51e-54f394cb9c22"),
                            AccountId = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2830),
                            UpdatedBy = "",
                            VendorId = new Guid("cc905377-0e04-45fa-8df7-6c0b5c41233d")
                        },
                        new
                        {
                            Id = new Guid("88f6f0b4-4ba9-4ff8-b123-e27e375b3907"),
                            AccountId = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2840),
                            UpdatedBy = "",
                            VendorId = new Guid("12e0c13d-d4df-4466-bc80-1d57f7e5c53b")
                        },
                        new
                        {
                            Id = new Guid("7a0c0d50-91d0-41bc-b718-a58d680b525c"),
                            AccountId = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2840),
                            UpdatedBy = "",
                            VendorId = new Guid("81b97a70-6dc3-4081-80d5-9e5c85916d13")
                        },
                        new
                        {
                            Id = new Guid("f3545455-1807-4210-8bac-772be83761c4"),
                            AccountId = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2850),
                            UpdatedBy = "",
                            VendorId = new Guid("72266823-efa2-4149-a265-01d811bc1cea")
                        },
                        new
                        {
                            Id = new Guid("3a280f49-0286-4ec7-a1bb-701704cd12f7"),
                            AccountId = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2850),
                            UpdatedBy = "",
                            VendorId = new Guid("44861575-9bc4-4fb2-9b56-51be2e8bef02")
                        },
                        new
                        {
                            Id = new Guid("b56eac0a-b6bb-4122-a5b4-72824ff3b643"),
                            AccountId = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2850),
                            UpdatedBy = "",
                            VendorId = new Guid("b4f5ce8f-d59a-4a7c-a7a5-d174ae8d4464")
                        },
                        new
                        {
                            Id = new Guid("e0952eb4-67c3-4fc2-864b-1c963ab0b333"),
                            AccountId = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2860),
                            UpdatedBy = "",
                            VendorId = new Guid("0fcc1cdf-d4cf-4e88-a22b-1f5419606e7f")
                        },
                        new
                        {
                            Id = new Guid("aabc5c04-063d-4111-be95-6150687c886f"),
                            AccountId = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2860),
                            UpdatedBy = "",
                            VendorId = new Guid("06e62faa-ff9f-4893-b904-ec854385d33e")
                        },
                        new
                        {
                            Id = new Guid("21bda1a6-c48c-4669-880c-8586c209f301"),
                            AccountId = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2860),
                            UpdatedBy = "",
                            VendorId = new Guid("e5f6171a-4a2b-44d1-98c5-8ae8773a9bef")
                        },
                        new
                        {
                            Id = new Guid("d9df98e5-91e2-40d6-82ae-99077f4e683a"),
                            AccountId = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2870),
                            UpdatedBy = "",
                            VendorId = new Guid("c1d49297-f566-46ec-bd4a-bc6df6625ed1")
                        },
                        new
                        {
                            Id = new Guid("df605743-7503-43a4-b6ee-c5ca6432164f"),
                            AccountId = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2870),
                            UpdatedBy = "",
                            VendorId = new Guid("f1aaccae-ac18-40bb-a6ee-5059ff2fcc45")
                        },
                        new
                        {
                            Id = new Guid("86658d5e-f17a-49bd-824f-a76ad264373a"),
                            AccountId = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2870),
                            UpdatedBy = "",
                            VendorId = new Guid("115fe38b-6a9b-403b-8a08-63bd73e3cf51")
                        },
                        new
                        {
                            Id = new Guid("6747238c-78ee-45ff-8518-6b907d6af0f5"),
                            AccountId = new Guid("81d5c823-5d94-40c5-9530-8cd2d2787776"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2880),
                            UpdatedBy = "",
                            VendorId = new Guid("55725585-220d-43ea-8245-f4b75f6e19e4")
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VendorTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a27fbe9d-f9ec-472b-b276-ca838ad9fe65"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2500),
                            Description = "A venue for hosting wedding ceremonies, typically in a religious setting.",
                            Name = "Church",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3e340924-cde0-478f-9ebc-03bf6e0b0cf9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2510),
                            Description = "A venue for hosting post-ceremony receptions or gatherings.",
                            Name = "Reception Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e6ae9ba0-77c4-41bd-888f-43c8ba3e9784"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2520),
                            Description = "Manages lights, sound systems and audio equipment for the ceremony and reception.",
                            Name = "Lights & Sounds",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3273144b-df11-419e-8ace-c27e8074e8c9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2520),
                            Description = "Provides food and beverage services for the wedding.",
                            Name = "Caterer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("eca44e40-a748-4372-80ab-aed8b57e4fcd"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2530),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photographer & Videographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5a0ea860-b775-4282-baaf-5d26532ff52a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2530),
                            Description = "A musical group that performs live at the wedding reception.",
                            Name = "Live Band",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("18db66c2-191c-4e34-abf1-f97166dc14f8"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2530),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Hair & Makeup Artist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f2e88535-0d18-4186-97cd-e0e1a8c8ccde"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2540),
                            Description = "Supplies floral arrangements, bouquets, and centerpieces.",
                            Name = "Florist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4ed3ccea-e270-4c58-b7d3-8ae8cda3e076"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2540),
                            Description = "Sells wedding rings and related jewelry.",
                            Name = "Jeweler",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("fd7ac64f-1326-47c7-bf47-64b448441620"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2550),
                            Description = "Organizes wedding activities and ensures event flows smoothly.",
                            Name = "Wedding Coordinator",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("babe111c-6c11-4bdf-9390-e981db0e915a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2550),
                            Description = "Provides mobile bar services for cocktail hours and receptions.",
                            Name = "Mobile Bar",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("75152bd9-427d-4b31-962b-ab54482b249b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2550),
                            Description = "Offers keepsakes or favors for wedding guests.",
                            Name = "Souvenirs",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("aed438e7-0a34-44b6-bf33-2aad08a05d1b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2560),
                            Description = "Hosts and coordinates the wedding program.",
                            Name = "Emcee",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0d8c1ec9-4771-4e65-ad0a-2c7bd8db58e0"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2560),
                            Description = "Location where the wedding ceremony and/or reception is held.",
                            Name = "Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1b691a15-8ca4-4990-91ba-c28600242258"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2570),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("de9d7680-e3fe-47b5-ba6b-edd80af592f0"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2570),
                            Description = "Records the wedding ceremony and reception with high-quality video.",
                            Name = "Videographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("99ca769f-74fe-4cd1-becd-7bfd6f85d731"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2570),
                            Description = "Provides music entertainment and emceeing for the wedding and reception.",
                            Name = "DJ",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("debf0d5c-3642-4fa7-90bd-f2a848ef7f87"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2580),
                            Description = "Coordinates all aspects of the wedding planning process from start to finish.",
                            Name = "Wedding Planner",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8fb658d2-8e63-41b4-aa97-0dc284366f9a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2580),
                            Description = "Creates wedding cakes, cupcakes, and desserts for the celebration.",
                            Name = "Baker",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("7f54b86b-5a5e-4360-bc6c-e0a982966c45"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2580),
                            Description = "Provides vehicles for transporting the wedding party and guests.",
                            Name = "Transportation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("dfad9764-6276-45d1-ac3d-2f1f66940ba5"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2590),
                            Description = "Conducts the wedding ceremony and ensures it is legally binding.",
                            Name = "Officiant",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("7719d4ac-ed43-41f7-8b7b-d8205c802c88"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2590),
                            Description = "Styles hair for the bride, bridesmaids, and other family members.",
                            Name = "Hair Stylist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("9b77c305-74bd-450d-b12c-c0e3305c4053"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2600),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Makeup Artist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("77111b23-bc88-4e61-9a3b-b6a292959010"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2600),
                            Description = "Offers items for rent such as tables, chairs, linens, and decor.",
                            Name = "Rentals",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6186f92c-e2fc-4f8f-8ae3-550f2cbf44cc"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2600),
                            Description = "Designs and prints wedding invitations, save-the-dates, and programs.",
                            Name = "Stationery",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("65e6db8d-8873-4241-9e2a-f8252ff7438e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2610),
                            Description = "Provides a fun photo booth setup with props for guests to enjoy.",
                            Name = "Photo Booth",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2a2b893f-4a33-4066-bd06-a6594a2f4586"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2610),
                            Description = "Ensures the safety and security of the wedding event and guests.",
                            Name = "Security",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c9d1021d-a2e6-4e33-96cd-b1ba4d972ae2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2620),
                            Description = "Creates customized lighting plans to enhance the wedding ambiance.",
                            Name = "Lighting Designer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e8b91b23-7f3a-4b8e-bfa8-8ac04b298382"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 9, 15, 30, 20, 144, DateTimeKind.Utc).AddTicks(2620),
                            Description = "Manages sound systems and audio equipment for the ceremony and reception.",
                            Name = "Sound Engineer",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Content", "Content")
                        .WithMany("Events")
                        .HasForeignKey("ContentId");

                    b.HasOne("AMP.EMS.API.Core.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventAccount", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "Account")
                        .WithMany("EventAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventAccounts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventGuests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Guest", "Guest")
                        .WithMany("EventGuests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuest", "EventGuest")
                        .WithMany("EventGuestInvitations")
                        .HasForeignKey("EventGuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventInvitation", "EventInvitation")
                        .WithMany("EventGuestInvitations")
                        .HasForeignKey("EventInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuest");

                    b.Navigation("EventInvitation");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuestInvitation", "EventGuestInvitation")
                        .WithMany("EventGuestInvitationRsvps")
                        .HasForeignKey("EventGuestInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuestInvitation");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvpItem", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", "EventGuestInvitationRsvp")
                        .WithMany("EventGuestInvitationRsvpItems")
                        .HasForeignKey("EventGuestInvitationRsvpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuestInvitationRsvp");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestRole", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuest", "EventGuest")
                        .WithMany("EventGuestRoles")
                        .HasForeignKey("EventGuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Role", "Role")
                        .WithMany("EventGuestRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuest");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Content", "Content")
                        .WithMany("EventInvitations")
                        .HasForeignKey("ContentId");

                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventInvitations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventTypeRole", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventType", "EventType")
                        .WithMany("EventTypeRoles")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContract", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContractState", "EventVendorContractState")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("EventVendorContractStateId");

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("EventVendorContractState");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPayment", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContract", "EventVendorContract")
                        .WithMany("EventVendorContractPayments")
                        .HasForeignKey("EventVendorContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", "EventVendorContractPaymentState")
                        .WithMany("EventVendorContractPayments")
                        .HasForeignKey("EventVendorContractPaymentStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContractPaymentType", "EventVendorContractPaymentType")
                        .WithMany("EventVendorContractPayments")
                        .HasForeignKey("EventVendorContractPaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId");

                    b.Navigation("EventVendorContract");

                    b.Navigation("EventVendorContractPaymentState");

                    b.Navigation("EventVendorContractPaymentType");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentType", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorContractStates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTransaction", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Transaction", "Transaction")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Transaction");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTypeBudget", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventBudgets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.VendorType", "VendorType")
                        .WithMany("EventVendorTypeBudgets")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("VendorType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Product", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("Roles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "CreditAccount")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "DebitAccount")
                        .WithMany("DebitTransactions")
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AMP.EMS.API.Core.Entities.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.VendorType", "VendorType")
                        .WithMany("Vendors")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VendorType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorAccount", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "Account")
                        .WithMany("VendorAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("VendorAccounts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.Navigation("CreditTransactions");

                    b.Navigation("DebitTransactions");

                    b.Navigation("EventAccounts");

                    b.Navigation("VendorAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Content", b =>
                {
                    b.Navigation("EventInvitations");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.Navigation("EventAccounts");

                    b.Navigation("EventBudgets");

                    b.Navigation("EventGuests");

                    b.Navigation("EventInvitations");

                    b.Navigation("EventVendorContractStates");

                    b.Navigation("EventVendorContracts");

                    b.Navigation("EventVendorTransactions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.Navigation("EventGuestInvitations");

                    b.Navigation("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.Navigation("EventGuestInvitationRsvps");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.Navigation("EventGuestInvitationRsvpItems");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.Navigation("EventGuestInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventType", b =>
                {
                    b.Navigation("EventTypeRoles");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContract", b =>
                {
                    b.Navigation("EventVendorContractPayments");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.Navigation("EventVendorContractPayments");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentType", b =>
                {
                    b.Navigation("EventVendorContractPayments");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.Navigation("EventVendorContracts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Guest", b =>
                {
                    b.Navigation("EventGuests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.Navigation("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.Navigation("EventVendorTransactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.Navigation("EventVendorContracts");

                    b.Navigation("EventVendorTransactions");

                    b.Navigation("VendorAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorType", b =>
                {
                    b.Navigation("EventVendorTypeBudgets");

                    b.Navigation("Vendors");
                });
#pragma warning restore 612, 618
        }
    }
}
