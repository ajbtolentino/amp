// <auto-generated />
using System;
using AMP.EMS.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AMP.EMS.API.Migrations
{
    [DbContext(typeof(EmsDbContext))]
    partial class EmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("857e18dc-9d19-4aae-b51b-22dc71c62390"),
                            AccountNumber = "ebab313b-62b1-4d87-9607-aec0db74696e",
                            AccountTypeId = new Guid("f04ee2e8-3b62-4423-9b99-22f68d21016d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3000),
                            Name = "Vendor Account",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2feba8df-234d-428c-86b6-cf1061c09f80"),
                            AccountNumber = "2ff73eea-48e2-430c-955a-959d296563e4",
                            AccountTypeId = new Guid("f04ee2e8-3b62-4423-9b99-22f68d21016d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3290),
                            Name = "Event Account",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f04ee2e8-3b62-4423-9b99-22f68d21016d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4900),
                            Description = "",
                            Name = "Cash",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6b0797fe-a680-4d28-91a4-94f0ae869bf3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4900),
                            Description = "",
                            Name = "GCash",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b4db4c1a-43ef-4fa2-9fe4-3d4739b28e4a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4910),
                            Description = "",
                            Name = "Savings",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5f3f9a0a-3c68-481f-8aba-c0d801711b20"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4910),
                            Description = "",
                            Name = "Credit Card",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("07e1291a-b670-4ba4-9e84-9871e5449e6a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4920),
                            Description = "",
                            Name = "Checking",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3070),
                            Description = "Wedding",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = new Guid("c08c0a9a-d6b2-4006-b8df-6fd679b44683"),
                            Location = "Ph",
                            Seats = 0,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Wedding",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EventId");

                    b.ToTable("EventAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b9126e3-2b4c-4a1d-ad0e-981d26b3fac3"),
                            AccountId = new Guid("2feba8df-234d-428c-86b6-cf1061c09f80"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3310),
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("GuestId");

                    b.ToTable("EventGuests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventInvitationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestId");

                    b.HasIndex("EventInvitationId");

                    b.ToTable("EventGuestInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestInvitationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Response")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestInvitationId");

                    b.ToTable("EventGuestInvitationRsvps");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvpItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestInvitationRsvpId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestInvitationRsvpId");

                    b.ToTable("EventGuestInvitationsRsvpItems");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestId");

                    b.HasIndex("RoleId");

                    b.ToTable("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RsvpDeadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c08c0a9a-d6b2-4006-b8df-6fd679b44683"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4730),
                            Description = "A ceremony where two people are united in marriage.",
                            Name = "Wedding",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3b4e0090-b064-484e-bb8a-436ae0109fbb"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4790),
                            Description = "An event organized by a company or business for its employees or clients.",
                            Name = "Corporate Event",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("57df092f-17ef-4e90-bbfa-25ffd847f151"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4790),
                            Description = "A celebration of the anniversary of a person's birth.",
                            Name = "Birthday Party",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2db98350-2916-414f-a894-4205fbf6053d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4800),
                            Description = "A celebration commemorating a significant milestone in a couple's relationship.",
                            Name = "Anniversary Celebration",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("92fc11a0-88d6-4fc8-b2cc-feced4040527"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4800),
                            Description = "A celebration to honor the completion of an academic program.",
                            Name = "Graduation Party",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("eef80111-3ef1-43c8-a6eb-130f76abb28f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4810),
                            Description = "A celebration held to honor the expectant mother and her baby.",
                            Name = "Baby Shower",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("dd208f78-cb6b-4e84-b54d-6f3cf3a3ea9c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4810),
                            Description = "An event organized to raise funds or awareness for a charitable cause.",
                            Name = "Charity Event",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b61e9c09-7c23-4cb5-a6ea-209f3399117d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4810),
                            Description = "A live performance of music by one or more musicians.",
                            Name = "Concert",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("da931f60-904e-45f2-af03-2cb747fb90e1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4820),
                            Description = "A series of events or activities celebrating a particular theme or occasion.",
                            Name = "Festival",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("404364c1-bb43-41fb-abb3-e16c9238b749"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4820),
                            Description = "An exhibition where businesses showcase their products and services.",
                            Name = "Trade Show",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventTypeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("EventTypeRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventVendorContractPaymentStateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventVendorContractStateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventVendorPaymentStateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventVendorContractPaymentStateId");

                    b.HasIndex("EventVendorContractStateId");

                    b.HasIndex("VendorId");

                    b.ToTable("EventVendorContracts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventVendorContractPaymentState");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44546681-6280-4bd9-8467-8afeccbfe1d2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3240),
                            Description = "Waiting for the initial deposit to be paid.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Deposit Pending",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f60e75b9-9f3e-4900-a80b-c4133dc9da8f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3250),
                            Description = "Partial payment received, remaining balance due.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Partial Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8b0ffa60-9421-426d-bd36-8af6ae428fb2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3250),
                            Description = "All payments have been made, contract is paid in full.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Paid in Full",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0dab70ce-6975-4971-8b41-23c79a750a85"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3250),
                            Description = "Payment is overdue.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Overdue Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f9efb7ea-7958-47a0-b393-99bbff219beb"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3260),
                            Description = "Refund is pending processing.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Refund Pending",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("906eb283-a43f-41c5-b415-5d012b0e795b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3260),
                            Description = "Refund has been processed and completed.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Refunded",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventVendorContractStates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("852e798d-7690-4d17-9b69-d61040164d2a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3190),
                            Description = "Initial inquiry stage.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Inquiry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("059cef22-b130-4901-9088-f40495c5df50"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3200),
                            Description = "Waiting for a quote from the vendor.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Pending Quote",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1eb61ef0-32cb-41c6-af97-bcccbbd04aa6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3200),
                            Description = "Quote has been received from the vendor.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Quote Received",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6c114ad3-07a7-40eb-9284-ebe5afd63756"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3210),
                            Description = "Negotiations are ongoing with the vendor.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Negotiation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f3da1b8d-b402-44bf-bef6-0b586c45bda8"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3210),
                            Description = "Reserved but not yet confirmed.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Reserved",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("eabe52bd-60b5-4272-bfd6-9c1e7aa59bb6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3210),
                            Description = "Tentatively booked, awaiting confirmation.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Tentative",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("60c22f16-9793-4d8b-b92a-c0a07dc66053"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3220),
                            Description = "Contract has been booked and confirmed.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Booked",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ea2bc5a1-1319-43e2-89d0-6ae90e598a91"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3220),
                            Description = "Contract has been completed and closed.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Closed",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("VendorId");

                    b.ToTable("EventVendorTransactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTypeBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("EventVendorTypeBudgets");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9f7afb6-08d5-47d7-8948-3af5ab0fb26f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2620),
                            Description = "Food and beverage services, including full-course meals, buffets, and bar services.",
                            Name = "Catering",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("175ffd7b-ef06-428b-9012-a28f50de1e2b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2630),
                            Description = "Locations for wedding ceremonies, receptions, and other related events.",
                            Name = "Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a8fdd0ed-ed87-4732-afc3-deba6c98b216"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2630),
                            Description = "Professional photography services for capturing wedding moments.",
                            Name = "Photography",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b198e7f5-2981-4987-a18c-04942569178c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2630),
                            Description = "Video recording services to capture and document the wedding day.",
                            Name = "Videography",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("14e3266a-db1f-4c5f-aea6-7d7e78318671"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2640),
                            Description = "Floral arrangements, bouquets, and other decorative flower services.",
                            Name = "Floristry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b817df44-e981-4468-b69e-3d533ecaef1e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2640),
                            Description = "Decorative items and setup services, including centerpieces, lighting, and table settings.",
                            Name = "Decor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("dd39dc88-7a2a-4e48-8ccf-62a3ad91673f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2640),
                            Description = "Entertainment services, including live bands, DJs, and performers.",
                            Name = "Music & Entertainment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2163d3a8-69e0-4c42-b2b3-d66578cf7ffa"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2650),
                            Description = "Coordination and planning services to manage the entire wedding event.",
                            Name = "Wedding Planning",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("36901cb0-9d2a-4cbe-abf3-76e60ca5b8f9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2650),
                            Description = "Transportation services for the wedding party and guests, such as limousines and shuttles.",
                            Name = "Transportation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ed75967a-2262-483b-8bae-409d036259e2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2660),
                            Description = "Wedding cakes, desserts, and other sweets for the reception.",
                            Name = "Cake & Confectionery",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6f2f51f6-9b5a-48ea-84c0-bfe24f099fad"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2660),
                            Description = "Wedding attire rentals or purchases, including dresses, suits, and accessories.",
                            Name = "Attire & Accessories",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("cada1168-d67e-45c0-8685-94ee0ad06f88"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2660),
                            Description = "Beauty services for the bridal party, including hairstyling and makeup.",
                            Name = "Hair & Makeup",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0e3f239c-d6ea-4579-9546-f14946994c8a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2670),
                            Description = "Design and printing services for wedding invitations, save-the-dates, and other stationery.",
                            Name = "Stationery & Invitations",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0ef71f7d-b378-4af0-bea4-62e4f2e6524a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2670),
                            Description = "Professional officiants to conduct the wedding ceremony.",
                            Name = "Officiant Services",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1e23e131-b418-40b6-8448-e70a51193f4c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2680),
                            Description = "Rental of items like furniture, tableware, tents, and dance floors.",
                            Name = "Rentals",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4c6e6e69-9d87-4563-a8ec-3cd1fe088c40"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2680),
                            Description = "Wedding rings, bridal jewelry, and other related accessories.",
                            Name = "Jewelry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("93fbcd79-aabe-4cc2-a74b-31963585ccb0"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2680),
                            Description = "Gifts and party favors for guests.",
                            Name = "Favors & Gifts",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26886b64-1290-467a-b72a-b5db25f32d65"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3100),
                            Description = "The female participant in the wedding.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Bride",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3f6990b8-26ca-4f3c-af90-811a535bdc88"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3110),
                            Description = "The male participant in the wedding.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Groom",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f250caa1-6092-4af8-a71d-8a35268cc89d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3110),
                            Description = "The groom's chief assistant during the wedding.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Best Man",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("aafee7b7-f9c2-4e77-8020-7c73b1fa9ce6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3110),
                            Description = "The bride's chief assistant during the wedding.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Maid of Honor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a324b79c-fdf1-4394-a396-07b18fb8fab8"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3120),
                            Description = "The main financial supporter of the wedding.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Primary Sponsor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("be7e0cca-b1b2-4a46-b5e6-27fb85e32a43"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3120),
                            Description = "An additional financial supporter of the wedding.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Secondary Sponsor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ce417024-35c8-4d99-9f73-cbdca9bc0fd2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3120),
                            Description = "A young girl who scatters flower petals along the aisle.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Flower Girl",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("38b0c53c-8320-48e4-bedb-74e4f6218eed"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3130),
                            Description = "A young child who carries the wedding rings during the ceremony.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Ring Bearer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("85863402-db5d-4885-8302-1fc452056c50"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3130),
                            Description = "A person invited to attend the wedding.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Guest",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("773e2d6f-1f91-48e7-93dd-5c7438834b69"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3140),
                            Description = "A person who carries the Bible during the ceremony.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Bible Bearer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("04f77d78-5cda-469c-849b-3e342efc995e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3140),
                            Description = "A role representing the cord used in the ceremony.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Cord",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("05238d99-9b81-4f75-804a-b309cc0c7810"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3140),
                            Description = "A role representing the candle holders during the ceremony.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Candles",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("427888ae-1857-48d2-bf35-f14d6009db2c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3150),
                            Description = "Individuals responsible for seating guests at the ceremony.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Ushers",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("054318bf-c95c-4b5e-a14d-3202082bac79"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3150),
                            Description = "Friends or family who stand with the groom during the ceremony.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Groomsmen",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1c1d5e30-045b-42fe-860b-877d1b2f2afd"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3160),
                            Description = "Friends or family who stand with the bride during the ceremony.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Bridesmaids",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c57544fe-7f41-48e6-bca9-6031b3b71a4c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3160),
                            Description = "A key family member who may have a significant role.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Parent of the Bride",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8130dce9-ea03-4fcb-a51f-9188e84d10dc"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3170),
                            Description = "A key family member representing the groom's side.",
                            EventId = new Guid("564bd367-ff68-4b5e-a5b6-e695b884b7ff"),
                            Name = "Parent of the Groom",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreditAccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DebitAccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d410d46-bccd-4dcd-acde-d38b6bd5c5d8"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4950),
                            Description = "A general payment or debit from a user’s account, often for non-purchase activities, such as bill payments or installment payments.",
                            Name = "Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c49fd8df-5bcd-4db2-a590-511be4ebef81"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4960),
                            Description = "Represents adding funds to an account, usually as a top-up or a prepayment.",
                            Name = "Deposit",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("cc131b1e-852a-49da-92e1-71ac75230726"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 950, DateTimeKind.Utc).AddTicks(4960),
                            Description = "Represents money returned to the user for a previous purchase, usually due to a return or an issue with the product/service.",
                            Name = "Refund",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("670dd042-05f9-4f1e-8c84-9e129852a1d5"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2920),
                            Description = "A venue for hosting wedding ceremonies, typically in a religious setting.",
                            Name = "Church",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("0addebed-3d70-4e49-b61d-ca10ca44817c")
                        },
                        new
                        {
                            Id = new Guid("cc7353fe-8fd5-428a-bdf8-f0d9b4fd9d8e"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2920),
                            Description = "A venue for hosting post-ceremony receptions or gatherings.",
                            Name = "Reception Venue",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("c626b299-e8b0-4b4c-b9b6-0fd5ffcc6f06")
                        },
                        new
                        {
                            Id = new Guid("5b44396b-d12c-43d3-97a3-d5eb5e2dff14"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2930),
                            Description = "Manages lights, sound systems and audio equipment for the ceremony and reception.",
                            Name = "Lights & Sounds",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("af8e87b7-1332-4907-ba55-3dedd06631b6")
                        },
                        new
                        {
                            Id = new Guid("aebba88d-f17e-4140-9c44-f14bc0dce87b"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2930),
                            Description = "Provides food and beverage services for the wedding.",
                            Name = "Caterer",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("44930831-3a7e-47f2-a499-5ff2f0d86632")
                        },
                        new
                        {
                            Id = new Guid("3b96b041-2103-4310-9b6b-0fe002067416"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2940),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photo & Video",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("5702b648-193b-49b2-b098-a499bc4fd73b")
                        },
                        new
                        {
                            Id = new Guid("ecefae58-76ad-4db3-b3fa-9b94181019c3"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2940),
                            Description = "A musical group that performs live at the wedding reception.",
                            Name = "Strings",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("e5f9b305-dffe-46e1-b288-c753b67d6694")
                        },
                        new
                        {
                            Id = new Guid("b57fe9ba-a51f-4ff8-b3ed-105c84bc1d00"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2950),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Hair & Makeup",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("5e5de48f-b8a2-4b18-bfd2-d2180f475d3d")
                        },
                        new
                        {
                            Id = new Guid("f6e3987e-ad9f-497b-8499-88d341c9eff7"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2950),
                            Description = "Supplies floral arrangements, bouquets, and centerpieces.",
                            Name = "Florist",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("cae8cdf1-077f-4a74-9824-fb60dd5d4402")
                        },
                        new
                        {
                            Id = new Guid("4e88c11c-4d5f-4c41-8474-45e18ae83703"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2950),
                            Description = "Sells wedding rings and related jewelry.",
                            Name = "Jeweler",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("8b9d814a-08cd-4135-81dd-fcb9c5c35f79")
                        },
                        new
                        {
                            Id = new Guid("bd978627-1514-4284-9557-7a59947667a4"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2960),
                            Description = "Organizes wedding activities and ensures event flows smoothly.",
                            Name = "Wedding Coordinator",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("101b7aa6-7fe8-442d-8f0e-a556e87a3aa0")
                        },
                        new
                        {
                            Id = new Guid("f1086525-f6e0-4866-862d-ce20fad50ce7"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2960),
                            Description = "Provides mobile bar services for cocktail hours and receptions.",
                            Name = "Mobile Bar",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("df77c71c-8d66-4d2b-b98b-6625b48faedc")
                        },
                        new
                        {
                            Id = new Guid("5a72ae0b-0e56-4a54-827e-2b21a6f100f9"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2970),
                            Description = "Offers keepsakes or favors for wedding guests.",
                            Name = "Souvenirs",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("a0f0ddbf-f6bf-4546-8f87-36df76f07429")
                        },
                        new
                        {
                            Id = new Guid("67a1317c-50e0-417d-aa8f-4f1ab2bd952f"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2970),
                            Description = "Hosts and coordinates the wedding program.",
                            Name = "Emcee",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("057a2ea9-e0c0-400e-83ad-a08a2ea474c1")
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68d21a7b-6ebf-453d-9408-788b139a357d"),
                            AccountId = new Guid("857e18dc-9d19-4aae-b51b-22dc71c62390"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(3040),
                            UpdatedBy = "",
                            VendorId = new Guid("670dd042-05f9-4f1e-8c84-9e129852a1d5")
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VendorTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0addebed-3d70-4e49-b61d-ca10ca44817c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2730),
                            Description = "A venue for hosting wedding ceremonies, typically in a religious setting.",
                            Name = "Church",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c626b299-e8b0-4b4c-b9b6-0fd5ffcc6f06"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2740),
                            Description = "A venue for hosting post-ceremony receptions or gatherings.",
                            Name = "Reception Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("af8e87b7-1332-4907-ba55-3dedd06631b6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2740),
                            Description = "Manages lights, sound systems and audio equipment for the ceremony and reception.",
                            Name = "Lights & Sounds",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("44930831-3a7e-47f2-a499-5ff2f0d86632"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2750),
                            Description = "Provides food and beverage services for the wedding.",
                            Name = "Caterer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5702b648-193b-49b2-b098-a499bc4fd73b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2750),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photographer & Videographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e5f9b305-dffe-46e1-b288-c753b67d6694"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2760),
                            Description = "A musical group that performs live at the wedding reception.",
                            Name = "Live Band",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5e5de48f-b8a2-4b18-bfd2-d2180f475d3d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2760),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Hair & Makeup Artist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("cae8cdf1-077f-4a74-9824-fb60dd5d4402"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2760),
                            Description = "Supplies floral arrangements, bouquets, and centerpieces.",
                            Name = "Florist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8b9d814a-08cd-4135-81dd-fcb9c5c35f79"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2770),
                            Description = "Sells wedding rings and related jewelry.",
                            Name = "Jeweler",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("101b7aa6-7fe8-442d-8f0e-a556e87a3aa0"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2770),
                            Description = "Organizes wedding activities and ensures event flows smoothly.",
                            Name = "Wedding Coordinator",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("df77c71c-8d66-4d2b-b98b-6625b48faedc"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2770),
                            Description = "Provides mobile bar services for cocktail hours and receptions.",
                            Name = "Mobile Bar",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a0f0ddbf-f6bf-4546-8f87-36df76f07429"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2780),
                            Description = "Offers keepsakes or favors for wedding guests.",
                            Name = "Souvenirs",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("057a2ea9-e0c0-400e-83ad-a08a2ea474c1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2780),
                            Description = "Hosts and coordinates the wedding program.",
                            Name = "Emcee",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("06789e1d-96ec-4214-ace7-9d67cce9652f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2790),
                            Description = "Location where the wedding ceremony and/or reception is held.",
                            Name = "Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ee9c28db-45de-4256-a861-82365430eb5f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2790),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e6e1f8df-58ac-4b00-a3da-dfaa6d16c053"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2790),
                            Description = "Records the wedding ceremony and reception with high-quality video.",
                            Name = "Videographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8d627700-d9b2-4eb7-b2c6-e9dc1d83d2e6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2800),
                            Description = "Provides music entertainment and emceeing for the wedding and reception.",
                            Name = "DJ",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("198fef30-ec9d-4c56-a89d-25797b8c4c5e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2800),
                            Description = "Coordinates all aspects of the wedding planning process from start to finish.",
                            Name = "Wedding Planner",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("95e90cc5-f4cf-4ebc-919e-3048b5042367"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2800),
                            Description = "Creates wedding cakes, cupcakes, and desserts for the celebration.",
                            Name = "Baker",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8fe08549-6fcc-4aaa-8e50-ebbd2ee873c9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2810),
                            Description = "Provides vehicles for transporting the wedding party and guests.",
                            Name = "Transportation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a9fdda25-0936-46bc-8c44-052cf40f786c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2810),
                            Description = "Conducts the wedding ceremony and ensures it is legally binding.",
                            Name = "Officiant",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("65925415-984c-4898-9f81-727c1f089b07"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2820),
                            Description = "Styles hair for the bride, bridesmaids, and other family members.",
                            Name = "Hair Stylist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8d6eb40b-05a3-4c2e-828a-b71ff1677eb7"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2820),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Makeup Artist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2685db96-92c9-461f-88f7-4af20449b6c1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2820),
                            Description = "Offers items for rent such as tables, chairs, linens, and decor.",
                            Name = "Rentals",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6b4963d1-4261-4415-afb1-5e4186e72a36"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2830),
                            Description = "Designs and prints wedding invitations, save-the-dates, and programs.",
                            Name = "Stationery",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("bb12bcdc-f89c-4847-a942-c1d001dfebd7"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2830),
                            Description = "Provides a fun photo booth setup with props for guests to enjoy.",
                            Name = "Photo Booth",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("75c84ce3-a3ee-4e87-bd98-a39292a1075e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2840),
                            Description = "Ensures the safety and security of the wedding event and guests.",
                            Name = "Security",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("dae957e7-7c1f-4956-8954-88b693d38cb6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2840),
                            Description = "Creates customized lighting plans to enhance the wedding ambiance.",
                            Name = "Lighting Designer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("827bcb6b-b094-4597-9385-d8f4078a6482"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 6, 11, 9, 46, 952, DateTimeKind.Utc).AddTicks(2840),
                            Description = "Manages sound systems and audio equipment for the ceremony and reception.",
                            Name = "Sound Engineer",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventAccount", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "Account")
                        .WithMany("EventAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventAccounts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventGuests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Guest", "Guest")
                        .WithMany("EventGuests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuest", "EventGuest")
                        .WithMany("EventGuestInvitations")
                        .HasForeignKey("EventGuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventInvitation", "EventInvitation")
                        .WithMany("EventGuestInvitations")
                        .HasForeignKey("EventInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuest");

                    b.Navigation("EventInvitation");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuestInvitation", "EventGuestInvitation")
                        .WithMany("EventGuestInvitationRsvps")
                        .HasForeignKey("EventGuestInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuestInvitation");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvpItem", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", "EventGuestInvitationRsvp")
                        .WithMany("EventGuestInvitationRsvpItems")
                        .HasForeignKey("EventGuestInvitationRsvpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuestInvitationRsvp");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestRole", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuest", "EventGuest")
                        .WithMany("EventGuestRoles")
                        .HasForeignKey("EventGuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Role", "Role")
                        .WithMany("EventGuestRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuest");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventInvitations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventTypeRole", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventType", "EventType")
                        .WithMany("EventTypeRoles")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContract", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", "EventVendorContractPaymentState")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("EventVendorContractPaymentStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContractState", "EventVendorContractState")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("EventVendorContractStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("EventVendorContractPaymentState");

                    b.Navigation("EventVendorContractState");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorContractStates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTransaction", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Transaction", "Transaction")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Transaction");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTypeBudget", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventBudgets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.VendorType", "VendorType")
                        .WithMany("EventVendorTypeBudgets")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("VendorType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Product", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("Roles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "CreditAccount")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "DebitAccount")
                        .WithMany("DebitTransactions")
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AMP.EMS.API.Core.Entities.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.VendorType", "VendorType")
                        .WithMany("Vendors")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VendorType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorAccount", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "Account")
                        .WithMany("VendorAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("VendorAccounts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.Navigation("CreditTransactions");

                    b.Navigation("DebitTransactions");

                    b.Navigation("EventAccounts");

                    b.Navigation("VendorAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.Navigation("EventAccounts");

                    b.Navigation("EventBudgets");

                    b.Navigation("EventGuests");

                    b.Navigation("EventInvitations");

                    b.Navigation("EventVendorContractStates");

                    b.Navigation("EventVendorContracts");

                    b.Navigation("EventVendorTransactions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.Navigation("EventGuestInvitations");

                    b.Navigation("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.Navigation("EventGuestInvitationRsvps");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.Navigation("EventGuestInvitationRsvpItems");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.Navigation("EventGuestInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventType", b =>
                {
                    b.Navigation("EventTypeRoles");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.Navigation("EventVendorContracts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.Navigation("EventVendorContracts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Guest", b =>
                {
                    b.Navigation("EventGuests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.Navigation("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.Navigation("EventVendorTransactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.Navigation("EventVendorContracts");

                    b.Navigation("EventVendorTransactions");

                    b.Navigation("VendorAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorType", b =>
                {
                    b.Navigation("EventVendorTypeBudgets");

                    b.Navigation("Vendors");
                });
#pragma warning restore 612, 618
        }
    }
}
