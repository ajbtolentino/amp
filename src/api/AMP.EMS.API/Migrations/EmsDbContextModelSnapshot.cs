// <auto-generated />
using System;
using AMP.EMS.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AMP.EMS.API.Migrations
{
    [DbContext(typeof(EmsDbContext))]
    partial class EmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96612049-fc71-46c6-9d36-1759016f4449"),
                            AccountNumber = "88cd5471-040f-4830-bb53-20e8817c0e0e",
                            AccountTypeId = new Guid("e7548a0e-5604-4b0b-bead-d1f575f1d251"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7660),
                            Name = "Vendor Account",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c4aa123b-b790-4a98-948c-494b820be054"),
                            AccountNumber = "faef333b-b4c5-432c-af30-c4c6c28a63a7",
                            AccountTypeId = new Guid("e7548a0e-5604-4b0b-bead-d1f575f1d251"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8100),
                            Name = "Event Account",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7548a0e-5604-4b0b-bead-d1f575f1d251"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9830),
                            Description = "",
                            Name = "Cash",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("02c2d02a-76e8-43da-ba18-9d57ecf1e430"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9830),
                            Description = "",
                            Name = "GCash",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("eb7696d9-9c95-4d48-b4ef-fa7beda42d5f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9840),
                            Description = "",
                            Name = "Savings",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("da5ae9cc-8681-4856-b317-aab6c9990ef0"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9840),
                            Description = "",
                            Name = "Credit Card",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6575126a-c505-44c6-8f29-d8022eda3fbe"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9840),
                            Description = "",
                            Name = "Checking",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7730),
                            Description = "Wedding",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = new Guid("d3adfb2f-fa2f-45f2-9cfd-dbdc50a66bde"),
                            Location = "Ph",
                            Seats = 0,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Wedding",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EventId");

                    b.ToTable("EventAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f842409-de8e-42be-87fa-ed5b3e6e737a"),
                            AccountId = new Guid("c4aa123b-b790-4a98-948c-494b820be054"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8120),
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("GuestId");

                    b.ToTable("EventGuests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventInvitationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestId");

                    b.HasIndex("EventInvitationId");

                    b.ToTable("EventGuestInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestInvitationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Response")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestInvitationId");

                    b.ToTable("EventGuestInvitationRsvps");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvpItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestInvitationRsvpId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestInvitationRsvpId");

                    b.ToTable("EventGuestInvitationsRsvpItems");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestId");

                    b.HasIndex("RoleId");

                    b.ToTable("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RsvpDeadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3adfb2f-fa2f-45f2-9cfd-dbdc50a66bde"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9660),
                            Description = "A ceremony where two people are united in marriage.",
                            Name = "Wedding",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ef7623e0-63ec-4546-8cef-78855edbeedc"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9720),
                            Description = "An event organized by a company or business for its employees or clients.",
                            Name = "Corporate Event",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3f7aa500-ff92-4bc3-8335-570da9a3832d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9720),
                            Description = "A celebration of the anniversary of a person's birth.",
                            Name = "Birthday Party",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("80449857-4280-4d0d-b6f0-fb7e4b552a8a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9730),
                            Description = "A celebration commemorating a significant milestone in a couple's relationship.",
                            Name = "Anniversary Celebration",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("fc2ac4aa-09c5-4aef-88a1-504fca4b4ca2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9730),
                            Description = "A celebration to honor the completion of an academic program.",
                            Name = "Graduation Party",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f0377a23-04ce-43f0-856c-92e844e93f49"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9740),
                            Description = "A celebration held to honor the expectant mother and her baby.",
                            Name = "Baby Shower",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("df717ede-1079-4881-94fa-c477857fc159"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9740),
                            Description = "An event organized to raise funds or awareness for a charitable cause.",
                            Name = "Charity Event",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ff5aa940-106d-4d1e-9e13-f5df25640402"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9740),
                            Description = "A live performance of music by one or more musicians.",
                            Name = "Concert",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("18a5a33f-71b3-419a-8cfc-db072515bc9a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9750),
                            Description = "A series of events or activities celebrating a particular theme or occasion.",
                            Name = "Festival",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c8747cfd-f45d-4940-9482-b82ad6432db6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9750),
                            Description = "An exhibition where businesses showcase their products and services.",
                            Name = "Trade Show",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventTypeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("EventTypeRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventVendorContractPaymentStateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventVendorContractStateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventVendorContractStateId");

                    b.HasIndex("VendorId");

                    b.ToTable("EventVendorContracts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DueAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventVendorContractId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventVendorContractPaymentStateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventVendorContractPaymentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventVendorContractId");

                    b.HasIndex("EventVendorContractPaymentStateId");

                    b.HasIndex("EventVendorContractPaymentTypeId");

                    b.HasIndex("TransactionId");

                    b.ToTable("EventVendorContractPayments");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventVendorContractPaymentStates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45f928ee-c39a-4e50-a087-21ce9139e800"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8040),
                            Description = "Payment is scheduled but not yet made.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Pending",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4cb5b62d-b175-4d69-91b4-e5ab4eaa9b4f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8040),
                            Description = "A portion of the payment has been made.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Partially Paid",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("25ed580c-47ef-4de9-929e-4d674c146fc8"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8040),
                            Description = "The full payment has been received.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Completed",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4774bf14-ae9d-45e8-b9a4-bf9c6d777a28"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8050),
                            Description = "Payment is past the due date and is overdue.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Overdue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("200e7846-b70b-4a70-ab11-adf90a9cb58f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8050),
                            Description = "Payment attempt was unsuccessful.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Failed",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("191a19f6-57dc-4419-be51-2f8168f26ba3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8060),
                            Description = "Payment has been returned to the payer.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Refunded",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("56c27634-6de4-49ba-8b56-9c718cb6d514"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8060),
                            Description = "The payment was canceled.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Canceled",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6c19dfca-795a-4828-bc92-f43b6a974b65"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8060),
                            Description = "Payment is under review and pending approval.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "In Review",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("76abee1f-7475-449b-87ef-1e39c941f31f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8070),
                            Description = "Payment is temporarily paused or held.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Hold",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a9c11404-c6c0-4bd1-b5d1-ba3be1a10d5f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8070),
                            Description = "Payment is planned for a future date.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Scheduled",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventVendorContractPaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ca51fd0-589a-48a2-bf10-5b46bc8b030b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7950),
                            Description = "Initial payment to secure services or confirm a booking.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Deposit",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4e138d82-16df-48fb-89a3-29514dc997e3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7950),
                            Description = "Payment to secure ongoing services, may or may not apply toward final balance.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Retainer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c1c6d5f0-b7ce-494a-99b0-7d4352ba35d8"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7960),
                            Description = "Scheduled partial payment at specific intervals in the contract.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Installment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c19d3638-ed92-4ae5-9e66-d2b766a11924"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7960),
                            Description = "Payments made upon reaching specific milestones or stages.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Progress Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("9ad432d6-747a-4917-8616-532535e30d5c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7960),
                            Description = "Remaining balance due upon completion of the contract.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Final Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("fa9f7de7-7a3b-4474-be34-58fa7644d600"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7970),
                            Description = "Payment made in advance for materials, equipment, or initial requirements.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Advance Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f7a16003-db42-4059-b5a8-9a326502a5f9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7970),
                            Description = "Fee charged for contract violations or unmet deadlines.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Penalty Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("7b06dd7b-3d17-4201-9b03-842b2ebf8a85"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7980),
                            Description = "Additional fee imposed if a payment is not made on time.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Late Fee",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8dd2b670-5ad8-4636-bb35-19d4a362c5e4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7980),
                            Description = "Fee charged if the contract is canceled after a specified date.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Cancellation Fee",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("90728c90-5f45-49c6-a3f4-117b87b3df00"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7980),
                            Description = "Reduction in payment, often for early payment or promotional purposes.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Discount",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d317f47c-fdb2-4295-bc79-1810f338d55f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7990),
                            Description = "Amount returned to the client if conditions such as cancellations are met.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Refund",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("34c35488-c8dc-4136-917a-a253ffaee0d9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7990),
                            Description = "Portion of payment withheld until contract conditions are satisfactorily fulfilled.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Holdback",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2db8a1ba-ed8c-447a-aca5-49337d103631"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7990),
                            Description = "Additional fee for using a specific payment method.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Service Charge",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f07fbaf0-885f-4ac1-9607-83a8f408fca9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8000),
                            Description = "Payment held by a third party until contract terms are fulfilled.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Escrow Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ad2709b4-efb0-4eb0-b87a-d0c17162a02c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(8000),
                            Description = "Additional payment for exceeding performance expectations.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Bonus Payment",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventVendorContractStates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaf543e9-b441-4415-9fbe-56d4043f5b0d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7850),
                            Description = "Initial contact to check vendor availability and gather preliminary information.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Inquiry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ba6fab0e-91d8-4f1a-873c-74427c5e0892"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7860),
                            Description = "Vendor provides a detailed proposal including costs, services, and timelines.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Proposal",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("345e3186-b051-4b98-9141-4e47756c8a0a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7860),
                            Description = "Discussion and adjustments of terms, pricing, and deliverables.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Negotiation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("7b6d4346-a2af-4209-8624-474e25802cc3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7870),
                            Description = "Internal review and approval of the final terms.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Approval",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("73e5d306-5cdc-4c05-bdc4-f6f8c489c6fd"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7870),
                            Description = "Formal contract is drafted and sent to the vendor for review and signing.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Contract Sent",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("226f8261-c2df-4fef-9e0c-29710b0f39f2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7870),
                            Description = "Vendor reviews the contract and proposes changes or confirms terms.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Contract Review",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4fe22a7e-99dc-4083-8cbf-f735ae990c74"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7880),
                            Description = "Both parties sign the contract, making it legally binding.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Signed",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("341fbfe2-c939-4af6-ac83-3bccc0c0c4f0"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7880),
                            Description = "An initial deposit is paid to secure the vendor’s services.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Deposit Paid",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b4faa093-ba4d-4804-a4d4-088851b860ba"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7900),
                            Description = "Vendor begins preparations for the event based on the agreed services.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Preparation and Planning",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4b783a3d-edd1-43ff-9a4c-7fa018ea3f9f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7900),
                            Description = "Vendor delivers their services during the event as outlined in the contract.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Execution",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5073ed7b-6126-47f9-b2f8-083c0b8e21f3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7910),
                            Description = "Discussion of adjustments if needed during execution.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Review and Adjustments",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2bdb9b0c-85d2-42c0-b9e0-8aa1f2bafa56"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7910),
                            Description = "Final payment is made upon the completion of services.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Completion and Final Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d466cb2b-430d-44e8-8be9-47d0e189d1d6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7920),
                            Description = "Event manager provides feedback on the vendor’s performance.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Feedback and Review",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ec2d1901-fff0-4d49-aef6-5d2118bb294f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7920),
                            Description = "Contract is officially closed after all deliverables are met and payments are completed.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Contract Closeout",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("VendorId");

                    b.ToTable("EventVendorTransactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTypeBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("EventVendorTypeBudgets");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2467b2e3-e51a-4366-af9a-607359a8fc81"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7220),
                            Description = "Food and beverage services, including full-course meals, buffets, and bar services.",
                            Name = "Catering",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("80509428-cf14-45a4-a0ba-ac14d3d467f0"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7230),
                            Description = "Locations for wedding ceremonies, receptions, and other related events.",
                            Name = "Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3e01cd5e-8ad4-4a37-98c5-be0bc7cb36b1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7240),
                            Description = "Professional photography services for capturing wedding moments.",
                            Name = "Photography",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("335e2dc2-876a-40cd-aaf8-96251fd628e7"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7240),
                            Description = "Video recording services to capture and document the wedding day.",
                            Name = "Videography",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("fe63c49e-ff54-47e7-95c5-6414b3b676e3"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7250),
                            Description = "Floral arrangements, bouquets, and other decorative flower services.",
                            Name = "Floristry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5e9c962f-a290-44fc-b0b9-d12aa30d2faa"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7250),
                            Description = "Decorative items and setup services, including centerpieces, lighting, and table settings.",
                            Name = "Decor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("be2d0043-5d99-4ade-9823-a8170d4a1ced"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7250),
                            Description = "Entertainment services, including live bands, DJs, and performers.",
                            Name = "Music & Entertainment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6501f614-8849-4c64-a14d-caa1e16b73ab"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7260),
                            Description = "Coordination and planning services to manage the entire wedding event.",
                            Name = "Wedding Planning",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("af921f18-5f5e-45ae-bdc5-b0af0d3ae285"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7260),
                            Description = "Transportation services for the wedding party and guests, such as limousines and shuttles.",
                            Name = "Transportation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a00bd6c8-6b36-4bb5-b34a-c83724e512ce"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7260),
                            Description = "Wedding cakes, desserts, and other sweets for the reception.",
                            Name = "Cake & Confectionery",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d321d65a-46de-4a94-bfaf-85e8043ff175"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7270),
                            Description = "Wedding attire rentals or purchases, including dresses, suits, and accessories.",
                            Name = "Attire & Accessories",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1bfd0478-8af8-499c-9fe0-e0d9b126cd0f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7270),
                            Description = "Beauty services for the bridal party, including hairstyling and makeup.",
                            Name = "Hair & Makeup",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a8c9006d-e891-4146-8cb4-b0731b32bd58"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7280),
                            Description = "Design and printing services for wedding invitations, save-the-dates, and other stationery.",
                            Name = "Stationery & Invitations",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3e39d3b9-dfc6-4f77-9096-3c1d0e7f1e70"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7280),
                            Description = "Professional officiants to conduct the wedding ceremony.",
                            Name = "Officiant Services",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1dd30444-1068-4aa4-8e83-83ff44fcc0a4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7280),
                            Description = "Rental of items like furniture, tableware, tents, and dance floors.",
                            Name = "Rentals",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("af0f9759-3dd0-45b9-9ce9-cfa53812d1fe"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7290),
                            Description = "Wedding rings, bridal jewelry, and other related accessories.",
                            Name = "Jewelry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("81a4ec09-a494-4a26-80a3-6d4c722e9f1d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7290),
                            Description = "Gifts and party favors for guests.",
                            Name = "Favors & Gifts",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b3b07f7-bcba-4233-b2bd-90ff1f5e1759"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7760),
                            Description = "The female participant in the wedding.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Bride",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d16b1aba-1a6a-40fb-88db-12b97afdd722"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7760),
                            Description = "The male participant in the wedding.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Groom",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("59dadf54-a345-47ad-910f-71f33e7e27dd"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7770),
                            Description = "The groom's chief assistant during the wedding.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Best Man",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("dbe01ebd-3462-4df1-a989-2c75a402732e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7770),
                            Description = "The bride's chief assistant during the wedding.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Maid of Honor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("fef68e4b-3591-434e-b66a-e5b76e0ce9de"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7770),
                            Description = "The main financial supporter of the wedding.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Primary Sponsor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0f41c599-7264-452d-ba73-cd2f9d466d80"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7780),
                            Description = "An additional financial supporter of the wedding.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Secondary Sponsor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("de50926e-f919-4d13-bb5b-d629a5a806f5"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7780),
                            Description = "A young girl who scatters flower petals along the aisle.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Flower Girl",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("15d6359a-2aec-4817-85c7-1649cf4ef420"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7790),
                            Description = "A young child who carries the wedding rings during the ceremony.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Ring Bearer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("deec1693-5790-4740-b917-32cef75c1b7d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7790),
                            Description = "A person invited to attend the wedding.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Guest",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("be5fca5c-2294-4976-8cc8-a670f5cf8f5a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7790),
                            Description = "A person who carries the Bible during the ceremony.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Bible Bearer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3fc5d3a6-a855-4ee0-a533-0e0ad24c5536"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7800),
                            Description = "A role representing the cord used in the ceremony.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Cord",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("223df872-e2fd-49b8-8cfe-aa3b2f0cf672"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7800),
                            Description = "A role representing the candle holders during the ceremony.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Candles",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("809c3548-fd92-4966-9697-2a498810442b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7810),
                            Description = "Individuals responsible for seating guests at the ceremony.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Ushers",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("9effb615-db36-4f4d-b732-2904d8a9cec2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7810),
                            Description = "Friends or family who stand with the groom during the ceremony.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Groomsmen",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1a9ad0f6-f49c-470d-a0d8-67bdbbf71c98"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7810),
                            Description = "Friends or family who stand with the bride during the ceremony.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Bridesmaids",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a9590d6c-054b-46f4-b360-2b80cb64b715"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7820),
                            Description = "A key family member who may have a significant role.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Parent of the Bride",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4ba89be3-94ef-481c-bc86-a726f795d1f4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7820),
                            Description = "A key family member representing the groom's side.",
                            EventId = new Guid("617ffe67-4cf4-4869-8908-24469d2e74fe"),
                            Name = "Parent of the Groom",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreditAccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DebitAccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96151338-8ec5-4804-b9af-6a0604fda0a6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9890),
                            Description = "A general payment or debit from a user’s account, often for non-purchase activities, such as bill payments or installment payments.",
                            Name = "Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f7d7e125-36d0-498b-b5c1-6882064663c6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9890),
                            Description = "Represents adding funds to an account, usually as a top-up or a prepayment.",
                            Name = "Deposit",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c1000e1d-80b5-440f-899d-eaf164538706"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 320, DateTimeKind.Utc).AddTicks(9890),
                            Description = "Represents money returned to the user for a previous purchase, usually due to a return or an issue with the product/service.",
                            Name = "Refund",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25a05686-8c3e-44c6-bcae-d5a4ff1f1144"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7560),
                            Description = "A venue for hosting wedding ceremonies, typically in a religious setting.",
                            Name = "Church",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("86d96ce3-b4b9-484c-ad44-ae384077f7ff")
                        },
                        new
                        {
                            Id = new Guid("32c86d47-6379-41ce-b5a9-71c470ec1467"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7570),
                            Description = "A venue for hosting post-ceremony receptions or gatherings.",
                            Name = "Reception Venue",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("717bd8a1-1a83-4b61-b9c9-53f9c75a155a")
                        },
                        new
                        {
                            Id = new Guid("57cbc5a6-f079-4a6c-aa24-6f26f8349183"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7570),
                            Description = "Manages lights, sound systems and audio equipment for the ceremony and reception.",
                            Name = "Lights & Sounds",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("7b05d1e4-6911-4df6-8043-1f6afa8d9ade")
                        },
                        new
                        {
                            Id = new Guid("7a81a78f-1b0a-4a86-bee5-2ed665c1d303"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7570),
                            Description = "Provides food and beverage services for the wedding.",
                            Name = "Caterer",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("b3b0c166-7be2-445b-9ac9-9c58cbd54673")
                        },
                        new
                        {
                            Id = new Guid("1a09dab2-527e-4724-9142-541a46a83c6b"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7580),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photo & Video",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("cd4d6744-7d04-4b7a-89ba-5dda863f36f0")
                        },
                        new
                        {
                            Id = new Guid("08d80482-46f1-41f9-88e2-853ea99b23e5"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7580),
                            Description = "A musical group that performs live at the wedding reception.",
                            Name = "Strings",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("d77c2ef6-fa06-44ea-95f3-b928e780621d")
                        },
                        new
                        {
                            Id = new Guid("e37fe827-363a-4190-8f81-bcfcbd758b1a"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7590),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Hair & Makeup",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("2f64b110-3b55-468f-b282-6c00aff5e258")
                        },
                        new
                        {
                            Id = new Guid("e75e4782-6966-4daf-b145-2146be104a8e"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7590),
                            Description = "Supplies floral arrangements, bouquets, and centerpieces.",
                            Name = "Florist",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("221ea1a3-968e-4d64-874d-719fbd9fa134")
                        },
                        new
                        {
                            Id = new Guid("7306042a-c7e0-4591-96b9-bc779933231e"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7600),
                            Description = "Sells wedding rings and related jewelry.",
                            Name = "Jeweler",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("101d8fa6-d055-4b8a-ba7d-d563e7b80373")
                        },
                        new
                        {
                            Id = new Guid("875c9c8c-a422-462a-8878-2691a648e43b"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7600),
                            Description = "Organizes wedding activities and ensures event flows smoothly.",
                            Name = "Wedding Coordinator",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("0a096e94-f958-4453-9c23-1147af6bf5ba")
                        },
                        new
                        {
                            Id = new Guid("1e202fc4-058d-4c2a-9922-47a5894e04f0"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7610),
                            Description = "Provides mobile bar services for cocktail hours and receptions.",
                            Name = "Mobile Bar",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("36014349-753a-45b4-b8d2-0990e0d6b148")
                        },
                        new
                        {
                            Id = new Guid("11e75d78-a75a-4c41-96f5-2689ae11832d"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7620),
                            Description = "Offers keepsakes or favors for wedding guests.",
                            Name = "Souvenirs",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("98e75f59-7449-43cc-9c67-cd8973132957")
                        },
                        new
                        {
                            Id = new Guid("02a7f71b-6844-4fe0-a3ab-dee8ab0e6f57"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7620),
                            Description = "Hosts and coordinates the wedding program.",
                            Name = "Emcee",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("a040ebc8-9e85-4efd-b54f-49fb02c867ac")
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8507a092-ec74-4e2a-a3c9-d85999c81884"),
                            AccountId = new Guid("96612049-fc71-46c6-9d36-1759016f4449"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7690),
                            UpdatedBy = "",
                            VendorId = new Guid("25a05686-8c3e-44c6-bcae-d5a4ff1f1144")
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VendorTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86d96ce3-b4b9-484c-ad44-ae384077f7ff"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7340),
                            Description = "A venue for hosting wedding ceremonies, typically in a religious setting.",
                            Name = "Church",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("717bd8a1-1a83-4b61-b9c9-53f9c75a155a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7380),
                            Description = "A venue for hosting post-ceremony receptions or gatherings.",
                            Name = "Reception Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("7b05d1e4-6911-4df6-8043-1f6afa8d9ade"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7380),
                            Description = "Manages lights, sound systems and audio equipment for the ceremony and reception.",
                            Name = "Lights & Sounds",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b3b0c166-7be2-445b-9ac9-9c58cbd54673"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7380),
                            Description = "Provides food and beverage services for the wedding.",
                            Name = "Caterer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("cd4d6744-7d04-4b7a-89ba-5dda863f36f0"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7390),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photographer & Videographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d77c2ef6-fa06-44ea-95f3-b928e780621d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7390),
                            Description = "A musical group that performs live at the wedding reception.",
                            Name = "Live Band",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2f64b110-3b55-468f-b282-6c00aff5e258"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7400),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Hair & Makeup Artist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("221ea1a3-968e-4d64-874d-719fbd9fa134"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7420),
                            Description = "Supplies floral arrangements, bouquets, and centerpieces.",
                            Name = "Florist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("101d8fa6-d055-4b8a-ba7d-d563e7b80373"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7420),
                            Description = "Sells wedding rings and related jewelry.",
                            Name = "Jeweler",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0a096e94-f958-4453-9c23-1147af6bf5ba"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7430),
                            Description = "Organizes wedding activities and ensures event flows smoothly.",
                            Name = "Wedding Coordinator",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("36014349-753a-45b4-b8d2-0990e0d6b148"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7430),
                            Description = "Provides mobile bar services for cocktail hours and receptions.",
                            Name = "Mobile Bar",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("98e75f59-7449-43cc-9c67-cd8973132957"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7430),
                            Description = "Offers keepsakes or favors for wedding guests.",
                            Name = "Souvenirs",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a040ebc8-9e85-4efd-b54f-49fb02c867ac"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7440),
                            Description = "Hosts and coordinates the wedding program.",
                            Name = "Emcee",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f2163e24-fe68-4a23-91c5-2670acd18ef1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7440),
                            Description = "Location where the wedding ceremony and/or reception is held.",
                            Name = "Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ea0a6d4d-2844-4160-a61f-0ed58e66e470"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7440),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e16211f8-137b-416b-af75-d80bebefc5cb"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7450),
                            Description = "Records the wedding ceremony and reception with high-quality video.",
                            Name = "Videographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e9939fec-7320-4052-8e6c-005a68913cc4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7450),
                            Description = "Provides music entertainment and emceeing for the wedding and reception.",
                            Name = "DJ",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("30712589-5d16-47c9-a2ba-315b2c67539b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7460),
                            Description = "Coordinates all aspects of the wedding planning process from start to finish.",
                            Name = "Wedding Planner",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("dd4b5583-c5dc-43b4-a229-7425db816aea"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7460),
                            Description = "Creates wedding cakes, cupcakes, and desserts for the celebration.",
                            Name = "Baker",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3e42a7fd-97ad-409c-9d5d-e6a99094c7ca"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7460),
                            Description = "Provides vehicles for transporting the wedding party and guests.",
                            Name = "Transportation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0d9ee999-759f-4a1e-8eed-fcd051a8ef35"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7470),
                            Description = "Conducts the wedding ceremony and ensures it is legally binding.",
                            Name = "Officiant",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6da54672-49c7-4afb-b35b-4b8d8e7dbcfb"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7470),
                            Description = "Styles hair for the bride, bridesmaids, and other family members.",
                            Name = "Hair Stylist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("af31b3fd-960e-46a2-8fa6-28f8ff3df84c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7470),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Makeup Artist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("648828a4-ad6d-48f1-9509-1ce9ec3403da"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7480),
                            Description = "Offers items for rent such as tables, chairs, linens, and decor.",
                            Name = "Rentals",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("77a87c8b-7c52-40c0-841f-24315e1bf454"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7480),
                            Description = "Designs and prints wedding invitations, save-the-dates, and programs.",
                            Name = "Stationery",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("fb523ca5-917d-4143-a213-27810006dc2e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7490),
                            Description = "Provides a fun photo booth setup with props for guests to enjoy.",
                            Name = "Photo Booth",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a17bbc92-3f39-43d2-91bb-217e1d989926"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7490),
                            Description = "Ensures the safety and security of the wedding event and guests.",
                            Name = "Security",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("625c59c6-c4dd-41bc-a64a-449885a8e37c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7490),
                            Description = "Creates customized lighting plans to enhance the wedding ambiance.",
                            Name = "Lighting Designer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8972100a-77b2-4ae3-bdec-ece2ca416612"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 7, 19, 51, 19, 322, DateTimeKind.Utc).AddTicks(7500),
                            Description = "Manages sound systems and audio equipment for the ceremony and reception.",
                            Name = "Sound Engineer",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventAccount", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "Account")
                        .WithMany("EventAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventAccounts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventGuests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Guest", "Guest")
                        .WithMany("EventGuests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuest", "EventGuest")
                        .WithMany("EventGuestInvitations")
                        .HasForeignKey("EventGuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventInvitation", "EventInvitation")
                        .WithMany("EventGuestInvitations")
                        .HasForeignKey("EventInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuest");

                    b.Navigation("EventInvitation");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuestInvitation", "EventGuestInvitation")
                        .WithMany("EventGuestInvitationRsvps")
                        .HasForeignKey("EventGuestInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuestInvitation");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvpItem", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", "EventGuestInvitationRsvp")
                        .WithMany("EventGuestInvitationRsvpItems")
                        .HasForeignKey("EventGuestInvitationRsvpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuestInvitationRsvp");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestRole", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuest", "EventGuest")
                        .WithMany("EventGuestRoles")
                        .HasForeignKey("EventGuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Role", "Role")
                        .WithMany("EventGuestRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuest");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventInvitations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventTypeRole", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventType", "EventType")
                        .WithMany("EventTypeRoles")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContract", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContractState", "EventVendorContractState")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("EventVendorContractStateId");

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("EventVendorContractState");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPayment", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContract", "EventVendorContract")
                        .WithMany("EventVendorContractPayments")
                        .HasForeignKey("EventVendorContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", "EventVendorContractPaymentState")
                        .WithMany("EventVendorContractPayments")
                        .HasForeignKey("EventVendorContractPaymentStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContractPaymentType", "EventVendorContractPaymentType")
                        .WithMany("EventVendorContractPayments")
                        .HasForeignKey("EventVendorContractPaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId");

                    b.Navigation("EventVendorContract");

                    b.Navigation("EventVendorContractPaymentState");

                    b.Navigation("EventVendorContractPaymentType");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentType", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorContractStates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTransaction", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Transaction", "Transaction")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Transaction");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTypeBudget", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventBudgets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.VendorType", "VendorType")
                        .WithMany("EventVendorTypeBudgets")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("VendorType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Product", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("Roles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "CreditAccount")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "DebitAccount")
                        .WithMany("DebitTransactions")
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AMP.EMS.API.Core.Entities.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.VendorType", "VendorType")
                        .WithMany("Vendors")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VendorType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorAccount", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "Account")
                        .WithMany("VendorAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("VendorAccounts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.Navigation("CreditTransactions");

                    b.Navigation("DebitTransactions");

                    b.Navigation("EventAccounts");

                    b.Navigation("VendorAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.Navigation("EventAccounts");

                    b.Navigation("EventBudgets");

                    b.Navigation("EventGuests");

                    b.Navigation("EventInvitations");

                    b.Navigation("EventVendorContractStates");

                    b.Navigation("EventVendorContracts");

                    b.Navigation("EventVendorTransactions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.Navigation("EventGuestInvitations");

                    b.Navigation("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.Navigation("EventGuestInvitationRsvps");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.Navigation("EventGuestInvitationRsvpItems");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.Navigation("EventGuestInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventType", b =>
                {
                    b.Navigation("EventTypeRoles");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContract", b =>
                {
                    b.Navigation("EventVendorContractPayments");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.Navigation("EventVendorContractPayments");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentType", b =>
                {
                    b.Navigation("EventVendorContractPayments");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.Navigation("EventVendorContracts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Guest", b =>
                {
                    b.Navigation("EventGuests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.Navigation("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.Navigation("EventVendorTransactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.Navigation("EventVendorContracts");

                    b.Navigation("EventVendorTransactions");

                    b.Navigation("VendorAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorType", b =>
                {
                    b.Navigation("EventVendorTypeBudgets");

                    b.Navigation("Vendors");
                });
#pragma warning restore 612, 618
        }
    }
}
