// <auto-generated />
using System;
using AMP.EMS.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AMP.EMS.API.Migrations
{
    [DbContext(typeof(EmsDbContext))]
    partial class EmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f0966ce-8e83-4f63-8973-fb9499aef978"),
                            AccountNumber = "1686a518-9239-48eb-a9f5-2e6e3cc1ebc7",
                            AccountTypeId = new Guid("b5345c60-faa9-4e2a-974b-1fbd622ac827"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2900),
                            Name = "Vendor Account",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ee8b3667-0e5c-44e0-8722-8e4333ae645a"),
                            AccountNumber = "7b67d6cb-3f48-4b83-9afc-f37634f4e3f6",
                            AccountTypeId = new Guid("b5345c60-faa9-4e2a-974b-1fbd622ac827"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3360),
                            Name = "Event Account",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5345c60-faa9-4e2a-974b-1fbd622ac827"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(4100),
                            Description = "",
                            Name = "Cash",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("50a42ede-ccdb-411d-9989-f3166ba46b73"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(4100),
                            Description = "",
                            Name = "GCash",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("62b4e545-17dc-4672-bfad-fde684666c30"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(4120),
                            Description = "",
                            Name = "Savings",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("9182808a-7936-406e-9e4e-d792a315303a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(4120),
                            Description = "",
                            Name = "Credit Card",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a9ea64db-bd2b-438a-b32c-6cb660a27398"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(4130),
                            Description = "",
                            Name = "Checking",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("HtmlContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2960),
                            Description = "Wedding",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = new Guid("64229d93-8694-443d-870a-41cac87c5db7"),
                            Location = "Ph",
                            Seats = 0,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Wedding",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EventId");

                    b.ToTable("EventAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa008d1c-3c6d-4e82-bcc3-81e041b1f3d4"),
                            AccountId = new Guid("ee8b3667-0e5c-44e0-8722-8e4333ae645a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3380),
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("GuestId");

                    b.ToTable("EventGuests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventInvitationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seats")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestId");

                    b.HasIndex("EventInvitationId");

                    b.ToTable("EventGuestInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestInvitationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Response")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestInvitationId");

                    b.ToTable("EventGuestInvitationRsvps");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvpItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestInvitationRsvpId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestInvitationRsvpId");

                    b.ToTable("EventGuestInvitationsRsvpItems");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventGuestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventGuestId");

                    b.HasIndex("RoleId");

                    b.ToTable("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RsvpDeadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("EventId");

                    b.ToTable("EventInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64229d93-8694-443d-870a-41cac87c5db7"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(3920),
                            Description = "A ceremony where two people are united in marriage.",
                            Name = "Wedding",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4c07de1e-4e9a-4317-af4d-cf1d9db89269"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(3980),
                            Description = "An event organized by a company or business for its employees or clients.",
                            Name = "Corporate Event",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c4d2d153-54eb-4fcb-9ab6-b78507ba1666"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(3980),
                            Description = "A celebration of the anniversary of a person's birth.",
                            Name = "Birthday Party",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("9e4a95ee-3f34-4c3a-a059-d0fc338f2765"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(3990),
                            Description = "A celebration commemorating a significant milestone in a couple's relationship.",
                            Name = "Anniversary Celebration",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d47754ce-6401-4b4a-8c8d-ae28915450e4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(3990),
                            Description = "A celebration to honor the completion of an academic program.",
                            Name = "Graduation Party",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8bc2b403-4354-458d-8b51-4b95d5bfb6f1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(4000),
                            Description = "A celebration held to honor the expectant mother and her baby.",
                            Name = "Baby Shower",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8e221298-cf3f-44a1-9abc-7eab79129315"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(4000),
                            Description = "An event organized to raise funds or awareness for a charitable cause.",
                            Name = "Charity Event",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("71b272a9-bd70-419f-9f84-afe31464427b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(4000),
                            Description = "A live performance of music by one or more musicians.",
                            Name = "Concert",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8e0e2ccc-a12e-4780-93f7-25169bf9c280"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(4010),
                            Description = "A series of events or activities celebrating a particular theme or occasion.",
                            Name = "Festival",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("83f1b1bc-4b1a-4f8f-b94a-229c164724b1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(4010),
                            Description = "An exhibition where businesses showcase their products and services.",
                            Name = "Trade Show",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventTypeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("EventTypeRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventVendorContractPaymentStateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EventVendorContractStateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventVendorContractStateId");

                    b.HasIndex("VendorId");

                    b.ToTable("EventVendorContracts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DueAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventVendorContractId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventVendorContractPaymentStateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventVendorContractPaymentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventVendorContractId");

                    b.HasIndex("EventVendorContractPaymentStateId");

                    b.HasIndex("EventVendorContractPaymentTypeId");

                    b.HasIndex("TransactionId");

                    b.ToTable("EventVendorContractPayments");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventVendorContractPaymentStates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("333f422d-28c1-4595-808c-f1e5580235cb"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3290),
                            Description = "Payment is scheduled but not yet made.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Pending",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("40b34fe2-482c-491f-a1a6-da749e27a2ac"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3300),
                            Description = "A portion of the payment has been made.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Partially Paid",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("727476d6-2094-4009-9363-3753efbedda4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3300),
                            Description = "The full payment has been received.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Completed",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("017acef6-ccf5-4cb1-9d36-796197648307"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3310),
                            Description = "Payment is past the due date and is overdue.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Overdue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0ee9cd7c-e6b3-40bf-a2f6-01de8e710f51"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3310),
                            Description = "Payment attempt was unsuccessful.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Failed",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f2101014-1aac-4144-9634-eb133e7bebe9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3310),
                            Description = "Payment has been returned to the payer.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Refunded",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("059904e1-c5f8-423e-b6d9-cd7a73454f8a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3320),
                            Description = "The payment was canceled.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Canceled",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c70ec182-2e71-4a0f-9275-55a16eb8838a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3320),
                            Description = "Payment is under review and pending approval.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "In Review",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2d9679b8-69b3-40cc-b419-05197f06a105"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3330),
                            Description = "Payment is temporarily paused or held.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Hold",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("78a4771e-4f6d-44c7-afdb-cafab88f4ccc"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3330),
                            Description = "Payment is planned for a future date.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Scheduled",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventVendorContractPaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a1e495d-bfb5-4425-b817-dda242831686"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3200),
                            Description = "Initial payment to secure services or confirm a booking.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Deposit",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("74a54324-1776-4ea7-ad9f-b34582529c60"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3210),
                            Description = "Payment to secure ongoing services, may or may not apply toward final balance.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Retainer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5c688908-f1bc-458b-a8f8-ef7c60e42983"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3210),
                            Description = "Scheduled partial payment at specific intervals in the contract.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Installment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("098347af-7813-4c79-b0b5-6db0f409af0a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3210),
                            Description = "Payments made upon reaching specific milestones or stages.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Progress Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("64f7d6e6-95ed-4219-9a65-38a3c4c60586"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3220),
                            Description = "Remaining balance due upon completion of the contract.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Final Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d7f5ff84-ec0f-48d1-b738-0d45a6b8322b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3220),
                            Description = "Payment made in advance for materials, equipment, or initial requirements.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Advance Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("85b38fb2-ca97-4455-86c6-c0d42d824c2a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3230),
                            Description = "Fee charged for contract violations or unmet deadlines.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Penalty Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("70b3de78-5137-4790-b9eb-8ac6cf16e402"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3230),
                            Description = "Additional fee imposed if a payment is not made on time.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Late Fee",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("23dcddb4-61c4-460a-afe5-5e2ee0225e1e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3230),
                            Description = "Fee charged if the contract is canceled after a specified date.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Cancellation Fee",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5fd70cc9-040d-4702-af4e-56128735737f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3240),
                            Description = "Reduction in payment, often for early payment or promotional purposes.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Discount",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ad8f3cd4-36a2-43a7-bc39-fb227f6bbeac"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3240),
                            Description = "Amount returned to the client if conditions such as cancellations are met.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Refund",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a3114764-dead-4d80-b9d4-0c013e5500ed"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3250),
                            Description = "Portion of payment withheld until contract conditions are satisfactorily fulfilled.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Holdback",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("fece0baa-110e-47c0-bfbd-d396c8a19d4d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3250),
                            Description = "Additional fee for using a specific payment method.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Service Charge",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("59a76eb4-c856-4f79-9800-e4106fb80083"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3250),
                            Description = "Payment held by a third party until contract terms are fulfilled.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Escrow Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3b8164a9-c966-442f-903d-3d911c05bd0a"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3260),
                            Description = "Additional payment for exceeding performance expectations.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Bonus Payment",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventVendorContractStates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e5f7195-40be-4b69-95db-5ca8802faacf"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3110),
                            Description = "Initial contact to check vendor availability and gather preliminary information.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Inquiry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("38fb2c33-737c-4516-b3a8-0752781a0bd5"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3120),
                            Description = "Vendor provides a detailed proposal including costs, services, and timelines.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Proposal",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("81791ddd-d703-4da5-9416-9ffb4c380098"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3120),
                            Description = "Discussion and adjustments of terms, pricing, and deliverables.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Negotiation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b9a6d418-2a7f-4086-851a-cda55fdd3183"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3130),
                            Description = "Internal review and approval of the final terms.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Approval",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("cfcf59f8-e959-42a2-90e4-c44d72bda8d1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3130),
                            Description = "Formal contract is drafted and sent to the vendor for review and signing.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Contract Sent",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4b6635d4-0d05-441b-8e5c-c9a5ebe75b17"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3130),
                            Description = "Vendor reviews the contract and proposes changes or confirms terms.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Contract Review",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("fee1da08-3a28-4b18-9075-7cf62721e605"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3140),
                            Description = "Both parties sign the contract, making it legally binding.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Signed",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("99a06554-2703-4021-82e4-a1a29084ddc6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3140),
                            Description = "An initial deposit is paid to secure the vendor’s services.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Deposit Paid",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b479d512-a695-47ff-a6e5-6e0d9a339a7e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3150),
                            Description = "Vendor begins preparations for the event based on the agreed services.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Preparation and Planning",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c091cf30-f677-4cef-8062-3903eafd8dda"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3150),
                            Description = "Vendor delivers their services during the event as outlined in the contract.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Execution",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("bd0f027f-2e4a-483f-8019-1bdb4d75e797"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3160),
                            Description = "Discussion of adjustments if needed during execution.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Review and Adjustments",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c42e6130-21c0-4c70-959f-80674e8fc427"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3160),
                            Description = "Final payment is made upon the completion of services.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Completion and Final Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5d486580-72d1-4d1e-8893-b6f341423b22"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3160),
                            Description = "Event manager provides feedback on the vendor’s performance.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Feedback and Review",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6053cfd6-71d9-41c7-a48b-78055984880b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3170),
                            Description = "Contract is officially closed after all deliverables are met and payments are completed.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Contract Closeout",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("VendorId");

                    b.ToTable("EventVendorTransactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTypeBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("EventVendorTypeBudgets");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb49ee45-58e7-40a2-a869-0e23f517879e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2470),
                            Description = "Food and beverage services, including full-course meals, buffets, and bar services.",
                            Name = "Catering",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ff611ebd-58c9-4c08-91f2-e1f2620f1341"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2480),
                            Description = "Locations for wedding ceremonies, receptions, and other related events.",
                            Name = "Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("05467e34-feaf-4dba-abee-c3bd0db171b8"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2480),
                            Description = "Professional photography services for capturing wedding moments.",
                            Name = "Photography",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("baf679de-a335-4083-bc4b-2028d7233afa"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2490),
                            Description = "Video recording services to capture and document the wedding day.",
                            Name = "Videography",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3a07a700-23e2-4166-ae93-f0fe1998372b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2530),
                            Description = "Floral arrangements, bouquets, and other decorative flower services.",
                            Name = "Floristry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("475b26c6-3fe7-4c56-a02d-9fe159cd249e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2540),
                            Description = "Decorative items and setup services, including centerpieces, lighting, and table settings.",
                            Name = "Decor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("4173ee13-7717-40ad-9689-e4848ce62258"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2540),
                            Description = "Entertainment services, including live bands, DJs, and performers.",
                            Name = "Music & Entertainment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("689bec72-02b4-418d-b89d-d0f737fa2bc4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2540),
                            Description = "Coordination and planning services to manage the entire wedding event.",
                            Name = "Wedding Planning",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("adfcc4c0-5af4-4b32-a6e7-d84ed2f7d2f0"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2550),
                            Description = "Transportation services for the wedding party and guests, such as limousines and shuttles.",
                            Name = "Transportation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1ea77ceb-e781-463d-a6f7-c51841757cf4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2550),
                            Description = "Wedding cakes, desserts, and other sweets for the reception.",
                            Name = "Cake & Confectionery",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("d0fd78ad-6d2f-49c1-ad86-f49067e67b95"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2550),
                            Description = "Wedding attire rentals or purchases, including dresses, suits, and accessories.",
                            Name = "Attire & Accessories",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e3ce3750-0b41-4716-8c89-3421ceb71561"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2560),
                            Description = "Beauty services for the bridal party, including hairstyling and makeup.",
                            Name = "Hair & Makeup",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a973714b-78ac-4f64-b5da-97087112bf9f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2560),
                            Description = "Design and printing services for wedding invitations, save-the-dates, and other stationery.",
                            Name = "Stationery & Invitations",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ba0c41b0-bd0f-4014-a960-3c5430cda5b4"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2570),
                            Description = "Professional officiants to conduct the wedding ceremony.",
                            Name = "Officiant Services",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("cf8da7c0-8ae7-4f5c-a2d9-fee1ea485089"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2570),
                            Description = "Rental of items like furniture, tableware, tents, and dance floors.",
                            Name = "Rentals",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("03056b51-2bac-4a04-b864-3449af1aa4e9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2570),
                            Description = "Wedding rings, bridal jewelry, and other related accessories.",
                            Name = "Jewelry",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("a3a44274-06f7-4241-9452-8a0cf21bdf9e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2580),
                            Description = "Gifts and party favors for guests.",
                            Name = "Favors & Gifts",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("315a4887-b22f-4f8d-86a6-372077e5a82f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2990),
                            Description = "The female participant in the wedding.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Bride",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("9471c359-e60c-474f-8aa4-9848d8791358"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2990),
                            Description = "The male participant in the wedding.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Groom",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("18837b52-c288-4fdd-a28d-07a5d251fa90"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3000),
                            Description = "The groom's chief assistant during the wedding.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Best Man",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("0a8467fa-6426-4854-96e7-a31e01cfafd8"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3000),
                            Description = "The bride's chief assistant during the wedding.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Maid of Honor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b8a223b1-c283-49a2-9490-adee4d8cb6a1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3010),
                            Description = "The main financial supporter of the wedding.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Primary Sponsor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("9e56fb9f-0c4e-4eb7-b510-22a906941e09"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3010),
                            Description = "An additional financial supporter of the wedding.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Secondary Sponsor",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2488d725-be65-4d5b-b03a-0e60e7f105fa"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3010),
                            Description = "A young girl who scatters flower petals along the aisle.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Flower Girl",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("9001947a-c753-4f9d-a58a-8ad37ab521ed"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3020),
                            Description = "A young child who carries the wedding rings during the ceremony.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Ring Bearer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("14f51f71-d68d-428f-8814-b47ef2383846"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3020),
                            Description = "A person invited to attend the wedding.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Guest",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("2918f2b5-b4db-4219-a037-e476bb798c56"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3040),
                            Description = "A person who carries the Bible during the ceremony.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Bible Bearer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("efd34349-94e6-42fa-95ef-82b5b948b09b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3050),
                            Description = "A role representing the cord used in the ceremony.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Cord",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8724a487-e0bb-49b7-8ddf-155d776b24fa"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3050),
                            Description = "A role representing the candle holders during the ceremony.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Candles",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("be7eb3c4-b45c-4a09-a27b-b4c9ad6f7457"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3050),
                            Description = "Individuals responsible for seating guests at the ceremony.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Ushers",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b955214b-3b0b-4f5a-bc91-d6cbb9c85bf1"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3060),
                            Description = "Friends or family who stand with the groom during the ceremony.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Groomsmen",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("1637f24e-01da-4bd9-be22-6b9e2348d550"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3060),
                            Description = "Friends or family who stand with the bride during the ceremony.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Bridesmaids",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("bc5310f8-0716-459d-bd9f-537909114983"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3070),
                            Description = "A key family member who may have a significant role.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Parent of the Bride",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("763760cd-f415-48c8-aa92-d41ec546d481"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(3070),
                            Description = "A key family member representing the groom's side.",
                            EventId = new Guid("fe330c91-7ca0-4af2-8887-d789ca094599"),
                            Name = "Parent of the Groom",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreditAccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DebitAccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d20690a-b6c1-4cfd-b2e7-c818042e27e9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(4170),
                            Description = "A general payment or debit from a user’s account, often for non-purchase activities, such as bill payments or installment payments.",
                            Name = "Payment",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("bcc65aef-3dad-4451-a716-a6e768aa1b1d"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(4180),
                            Description = "Represents adding funds to an account, usually as a top-up or a prepayment.",
                            Name = "Deposit",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("36018348-32dc-4e0b-bab9-f00c79574ae0"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 956, DateTimeKind.Utc).AddTicks(4180),
                            Description = "Represents money returned to the user for a previous purchase, usually due to a return or an issue with the product/service.",
                            Name = "Refund",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b86c13b6-6f8b-4bd5-8e61-dba3c8528501"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2800),
                            Description = "A venue for hosting wedding ceremonies, typically in a religious setting.",
                            Name = "Church",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("aebb1be9-e070-481e-a412-ec6284decee6")
                        },
                        new
                        {
                            Id = new Guid("a299160f-4f8f-49a4-8d4e-b983a2d6e3eb"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2810),
                            Description = "A venue for hosting post-ceremony receptions or gatherings.",
                            Name = "Reception Venue",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("40049ab5-b5b5-459b-bd4d-ee77a33d4ae2")
                        },
                        new
                        {
                            Id = new Guid("4a6b29b8-e593-46ee-a4ad-e29963c78a44"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2810),
                            Description = "Manages lights, sound systems and audio equipment for the ceremony and reception.",
                            Name = "Lights & Sounds",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("808cdb2e-bfda-4ae9-9d99-a65b98f8f758")
                        },
                        new
                        {
                            Id = new Guid("48a51c41-0df8-437b-a6d1-f364c4f3975c"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2820),
                            Description = "Provides food and beverage services for the wedding.",
                            Name = "Caterer",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("8756fd31-51ab-425e-a13b-665c6f4008fa")
                        },
                        new
                        {
                            Id = new Guid("c14f26ec-72ee-4dba-9bca-c5aff1c702a6"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2820),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photo & Video",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("e50b9f48-e3ad-4ffe-87fc-2b14cd9c0818")
                        },
                        new
                        {
                            Id = new Guid("7775ae3c-9745-4ff7-8363-6376e1669765"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2830),
                            Description = "A musical group that performs live at the wedding reception.",
                            Name = "Strings",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("fd892fee-18e0-40c3-988b-4d1f216e2161")
                        },
                        new
                        {
                            Id = new Guid("0bc20e4b-a22d-4ea6-8fac-a9420c8a8cdb"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2840),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Hair & Makeup",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("93d3f6d7-a359-4bc9-bab6-cc0477558a1e")
                        },
                        new
                        {
                            Id = new Guid("68c328d5-eba6-4a75-b6b9-68d54d652a3d"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2840),
                            Description = "Supplies floral arrangements, bouquets, and centerpieces.",
                            Name = "Florist",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("9d61c438-84b1-4a10-b19c-8d62d653dc34")
                        },
                        new
                        {
                            Id = new Guid("841f511a-9804-456b-9716-f2641bddf293"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2840),
                            Description = "Sells wedding rings and related jewelry.",
                            Name = "Jeweler",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("bd670dd6-a06a-439f-93c7-f16bc1ac331c")
                        },
                        new
                        {
                            Id = new Guid("cb1b9cc9-15d5-4317-94c9-2147330d59c1"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2850),
                            Description = "Organizes wedding activities and ensures event flows smoothly.",
                            Name = "Wedding Coordinator",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("9843ca25-bc43-46ac-8415-2da0c67f53d8")
                        },
                        new
                        {
                            Id = new Guid("f89a0899-56f9-4ea0-93fc-2da8056bb9f4"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2850),
                            Description = "Provides mobile bar services for cocktail hours and receptions.",
                            Name = "Mobile Bar",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("ec6efa36-63ce-4515-ba51-f934b1dfe724")
                        },
                        new
                        {
                            Id = new Guid("a260b4b4-0952-409c-84bd-688d7f3b907a"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2860),
                            Description = "Offers keepsakes or favors for wedding guests.",
                            Name = "Souvenirs",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("b9d53c3a-beb6-4b3d-b3d8-513b44d61097")
                        },
                        new
                        {
                            Id = new Guid("c67144fc-1471-409b-8b88-3b4da9df2e3b"),
                            Address = "N/A",
                            ContactInformation = "",
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2860),
                            Description = "Hosts and coordinates the wedding program.",
                            Name = "Emcee",
                            UpdatedBy = "",
                            VendorTypeId = new Guid("f518e614-430a-4fdf-b0e0-72701ce7fbb6")
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e4f6432-bc58-4f0d-8eac-d314f9cc404f"),
                            AccountId = new Guid("8f0966ce-8e83-4f63-8973-fb9499aef978"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2930),
                            UpdatedBy = "",
                            VendorId = new Guid("b86c13b6-6f8b-4bd5-8e61-dba3c8528501")
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VendorTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aebb1be9-e070-481e-a412-ec6284decee6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2620),
                            Description = "A venue for hosting wedding ceremonies, typically in a religious setting.",
                            Name = "Church",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("40049ab5-b5b5-459b-bd4d-ee77a33d4ae2"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2630),
                            Description = "A venue for hosting post-ceremony receptions or gatherings.",
                            Name = "Reception Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("808cdb2e-bfda-4ae9-9d99-a65b98f8f758"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2630),
                            Description = "Manages lights, sound systems and audio equipment for the ceremony and reception.",
                            Name = "Lights & Sounds",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8756fd31-51ab-425e-a13b-665c6f4008fa"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2630),
                            Description = "Provides food and beverage services for the wedding.",
                            Name = "Caterer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e50b9f48-e3ad-4ffe-87fc-2b14cd9c0818"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2640),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photographer & Videographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("fd892fee-18e0-40c3-988b-4d1f216e2161"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2640),
                            Description = "A musical group that performs live at the wedding reception.",
                            Name = "Live Band",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("93d3f6d7-a359-4bc9-bab6-cc0477558a1e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2650),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Hair & Makeup Artist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("9d61c438-84b1-4a10-b19c-8d62d653dc34"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2650),
                            Description = "Supplies floral arrangements, bouquets, and centerpieces.",
                            Name = "Florist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("bd670dd6-a06a-439f-93c7-f16bc1ac331c"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2650),
                            Description = "Sells wedding rings and related jewelry.",
                            Name = "Jeweler",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("9843ca25-bc43-46ac-8415-2da0c67f53d8"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2660),
                            Description = "Organizes wedding activities and ensures event flows smoothly.",
                            Name = "Wedding Coordinator",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ec6efa36-63ce-4515-ba51-f934b1dfe724"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2660),
                            Description = "Provides mobile bar services for cocktail hours and receptions.",
                            Name = "Mobile Bar",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b9d53c3a-beb6-4b3d-b3d8-513b44d61097"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2670),
                            Description = "Offers keepsakes or favors for wedding guests.",
                            Name = "Souvenirs",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("f518e614-430a-4fdf-b0e0-72701ce7fbb6"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2670),
                            Description = "Hosts and coordinates the wedding program.",
                            Name = "Emcee",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ebcc6289-1897-4e27-8176-5b536286a6db"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2670),
                            Description = "Location where the wedding ceremony and/or reception is held.",
                            Name = "Venue",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("9d7f339e-dd7d-48cf-b19d-d53bcfd31407"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2680),
                            Description = "Captures memories through professional photography during the wedding.",
                            Name = "Photographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("e53d45cf-1fb9-4638-8aa1-439005d85f27"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2680),
                            Description = "Records the wedding ceremony and reception with high-quality video.",
                            Name = "Videographer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("c8aae960-1235-492a-95ee-6e09d293c018"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2690),
                            Description = "Provides music entertainment and emceeing for the wedding and reception.",
                            Name = "DJ",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("adb633c8-5f8e-4c94-92bc-ea989ab3a304"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2690),
                            Description = "Coordinates all aspects of the wedding planning process from start to finish.",
                            Name = "Wedding Planner",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("565294f9-3a35-40b5-9fb4-3c8a259a84db"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2700),
                            Description = "Creates wedding cakes, cupcakes, and desserts for the celebration.",
                            Name = "Baker",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("3d5474ad-d92a-4c64-b41f-9d2758b24a92"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2700),
                            Description = "Provides vehicles for transporting the wedding party and guests.",
                            Name = "Transportation",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("241cfc5a-81c2-4730-96b8-69a33e03b33e"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2700),
                            Description = "Conducts the wedding ceremony and ensures it is legally binding.",
                            Name = "Officiant",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("614d45ab-e8bf-4129-9db6-a1b41fc0032b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2710),
                            Description = "Styles hair for the bride, bridesmaids, and other family members.",
                            Name = "Hair Stylist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("96dfecbc-da9e-4451-ad89-cfa93c15298b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2710),
                            Description = "Provides professional makeup services for the bride and bridal party.",
                            Name = "Makeup Artist",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("6cd5efaa-36e4-48b6-b69a-161ed09cf75f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2720),
                            Description = "Offers items for rent such as tables, chairs, linens, and decor.",
                            Name = "Rentals",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("ae157b4c-b9cd-408a-9619-4feeae4d2c92"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2720),
                            Description = "Designs and prints wedding invitations, save-the-dates, and programs.",
                            Name = "Stationery",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("deff0ef2-d1d0-4af9-8fd1-36d1e2306f7f"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2720),
                            Description = "Provides a fun photo booth setup with props for guests to enjoy.",
                            Name = "Photo Booth",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("8308e436-a3ed-4f9d-a2d2-367e4eb61564"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2730),
                            Description = "Ensures the safety and security of the wedding event and guests.",
                            Name = "Security",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("b8a49169-0f0e-47de-9b0e-69de9eabd6c9"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2730),
                            Description = "Creates customized lighting plans to enhance the wedding ambiance.",
                            Name = "Lighting Designer",
                            UpdatedBy = ""
                        },
                        new
                        {
                            Id = new Guid("5c4b6256-94c2-4d0a-a42a-c6ceec133f1b"),
                            CreatedBy = "",
                            DateCreated = new DateTime(2024, 11, 8, 18, 45, 34, 958, DateTimeKind.Utc).AddTicks(2740),
                            Description = "Manages sound systems and audio equipment for the ceremony and reception.",
                            Name = "Sound Engineer",
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Content", "Content")
                        .WithMany("Events")
                        .HasForeignKey("ContentId");

                    b.HasOne("AMP.EMS.API.Core.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventAccount", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "Account")
                        .WithMany("EventAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventAccounts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventGuests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Guest", "Guest")
                        .WithMany("EventGuests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuest", "EventGuest")
                        .WithMany("EventGuestInvitations")
                        .HasForeignKey("EventGuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventInvitation", "EventInvitation")
                        .WithMany("EventGuestInvitations")
                        .HasForeignKey("EventInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuest");

                    b.Navigation("EventInvitation");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuestInvitation", "EventGuestInvitation")
                        .WithMany("EventGuestInvitationRsvps")
                        .HasForeignKey("EventGuestInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuestInvitation");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvpItem", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", "EventGuestInvitationRsvp")
                        .WithMany("EventGuestInvitationRsvpItems")
                        .HasForeignKey("EventGuestInvitationRsvpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuestInvitationRsvp");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestRole", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventGuest", "EventGuest")
                        .WithMany("EventGuestRoles")
                        .HasForeignKey("EventGuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Role", "Role")
                        .WithMany("EventGuestRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGuest");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Content", "Content")
                        .WithMany("EventInvitations")
                        .HasForeignKey("ContentId");

                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventInvitations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventTypeRole", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventType", "EventType")
                        .WithMany("EventTypeRoles")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContract", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContractState", "EventVendorContractState")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("EventVendorContractStateId");

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("EventVendorContracts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("EventVendorContractState");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPayment", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContract", "EventVendorContract")
                        .WithMany("EventVendorContractPayments")
                        .HasForeignKey("EventVendorContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", "EventVendorContractPaymentState")
                        .WithMany("EventVendorContractPayments")
                        .HasForeignKey("EventVendorContractPaymentStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.EventVendorContractPaymentType", "EventVendorContractPaymentType")
                        .WithMany("EventVendorContractPayments")
                        .HasForeignKey("EventVendorContractPaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId");

                    b.Navigation("EventVendorContract");

                    b.Navigation("EventVendorContractPaymentState");

                    b.Navigation("EventVendorContractPaymentType");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentType", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorContractStates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTransaction", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Transaction", "Transaction")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("EventVendorTransactions")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Transaction");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorTypeBudget", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("EventBudgets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.VendorType", "VendorType")
                        .WithMany("EventVendorTypeBudgets")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("VendorType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Product", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Event", "Event")
                        .WithMany("Roles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "CreditAccount")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "DebitAccount")
                        .WithMany("DebitTransactions")
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AMP.EMS.API.Core.Entities.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.VendorType", "VendorType")
                        .WithMany("Vendors")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VendorType");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorAccount", b =>
                {
                    b.HasOne("AMP.EMS.API.Core.Entities.Account", "Account")
                        .WithMany("VendorAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMP.EMS.API.Core.Entities.Vendor", "Vendor")
                        .WithMany("VendorAccounts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Account", b =>
                {
                    b.Navigation("CreditTransactions");

                    b.Navigation("DebitTransactions");

                    b.Navigation("EventAccounts");

                    b.Navigation("VendorAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Content", b =>
                {
                    b.Navigation("EventInvitations");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Event", b =>
                {
                    b.Navigation("EventAccounts");

                    b.Navigation("EventBudgets");

                    b.Navigation("EventGuests");

                    b.Navigation("EventInvitations");

                    b.Navigation("EventVendorContractStates");

                    b.Navigation("EventVendorContracts");

                    b.Navigation("EventVendorTransactions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuest", b =>
                {
                    b.Navigation("EventGuestInvitations");

                    b.Navigation("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitation", b =>
                {
                    b.Navigation("EventGuestInvitationRsvps");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventGuestInvitationRsvp", b =>
                {
                    b.Navigation("EventGuestInvitationRsvpItems");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventInvitation", b =>
                {
                    b.Navigation("EventGuestInvitations");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventType", b =>
                {
                    b.Navigation("EventTypeRoles");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContract", b =>
                {
                    b.Navigation("EventVendorContractPayments");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentState", b =>
                {
                    b.Navigation("EventVendorContractPayments");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractPaymentType", b =>
                {
                    b.Navigation("EventVendorContractPayments");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.EventVendorContractState", b =>
                {
                    b.Navigation("EventVendorContracts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Guest", b =>
                {
                    b.Navigation("EventGuests");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Role", b =>
                {
                    b.Navigation("EventGuestRoles");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Transaction", b =>
                {
                    b.Navigation("EventVendorTransactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.Vendor", b =>
                {
                    b.Navigation("EventVendorContracts");

                    b.Navigation("EventVendorTransactions");

                    b.Navigation("VendorAccounts");
                });

            modelBuilder.Entity("AMP.EMS.API.Core.Entities.VendorType", b =>
                {
                    b.Navigation("EventVendorTypeBudgets");

                    b.Navigation("Vendors");
                });
#pragma warning restore 612, 618
        }
    }
}
